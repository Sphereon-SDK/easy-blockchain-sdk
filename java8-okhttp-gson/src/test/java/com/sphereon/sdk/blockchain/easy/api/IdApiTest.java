/*
 * Easy Blockchain API
 * The Easy Blockchain API is an easy to use API to store related entries within chains. Currently it stores entries using a Factom, Ethereum or Multichain blockchain.   For full API documentation please visit: https://docs.sphereon.com/api/easy-blockchain/0.10/html   Interactive testing: A web based test console is available in the Sphereon API store at: https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.blockchain.easy.api;

import com.sphereon.sdk.blockchain.easy.handler.ApiException;
import com.sphereon.sdk.blockchain.easy.model.Chain;
import com.sphereon.sdk.blockchain.easy.model.Entry;
import com.sphereon.sdk.blockchain.easy.model.ErrorResponse;
import com.sphereon.sdk.blockchain.easy.model.IdResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IdApi
 */
@Ignore
public class IdApiTest {

    private final IdApi api = new IdApi();

    
    /**
     * Determine chain id exists
     *
     * Determine whether the Id of a chain exists in the blockchain
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chainIdExistsTest() throws ApiException {
        String context = null;
        String chainId = null;
        IdResponse response = api.chainIdExists(context, chainId);

        // TODO: test validations
    }
    
    /**
     * Predetermine id of chain
     *
     * Pre determine the Id of a chain without anchoring it in the blockchain. You determine the Id that the chain would receive once it would have been anchored
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void determineChainIdTest() throws ApiException {
        String context = null;
        Chain chain = null;
        Boolean checkExistence = null;
        IdResponse response = api.determineChainId(context, chain, checkExistence);

        // TODO: test validations
    }
    
    /**
     * Predetermine id of an entry
     *
     * Pre determine the Id of an entry request without anchoring the entry
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void determineEntryIdTest() throws ApiException {
        String context = null;
        String chainId = null;
        Entry entry = null;
        Boolean checkExistence = null;
        IdResponse response = api.determineEntryId(context, chainId, entry, checkExistence);

        // TODO: test validations
    }
    
    /**
     * Determine entry id exists
     *
     * Determine whether the Id of an entry exists in the blockchain
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entryIdExistsTest() throws ApiException {
        String context = null;
        String chainId = null;
        String entryId = null;
        IdResponse response = api.entryIdExists(context, chainId, entryId);

        // TODO: test validations
    }
    
}
