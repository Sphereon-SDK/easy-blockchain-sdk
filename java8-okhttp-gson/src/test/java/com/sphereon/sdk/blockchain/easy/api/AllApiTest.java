/*
 * Easy Blockchain API
 * The Easy Blockchain API is an easy to use API to store related entries within chains. Currently it stores entries using a Factom, Ethereum or Multichain blockchain.   For full API documentation please visit: https://docs.sphereon.com/api/easy-blockchain/0.10/html   Interactive testing: A web based test console is available in the Sphereon API store at: https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.blockchain.easy.api;

import com.sphereon.sdk.blockchain.easy.handler.ApiException;
import com.sphereon.sdk.blockchain.easy.model.*;
import org.junit.*;
import org.junit.runners.MethodSorters;

import java.time.OffsetDateTime;

/**
 * API tests for AllApi
 */

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class AllApiTest extends AbstractApiTest {


    private final AllApi api = new AllApi();
    private static String determinedEntryId;
    private static OffsetDateTime firstEntryAnchorTime;
    private static CommittedEntry firstEntry;
    private static OffsetDateTime nextEntryAnchorTime;
    private static CommittedEntry nextEntry;


    @Before
    public void init() {
        configureApi(api.getApiClient());
    }


    @Test
    public void _010_createChainTest() throws ApiException {
        Chain chain = createChainRequest("Test Content", "first external id", "second external id");
        CommittedChainResponse response = api.createChain(CONTEXT_MULTCHAIN, chain);
        Assert.assertNotNull(response);
        Assert.assertNotNull(response);
        Assert.assertNotNull(response.getChain());
        Assert.assertNotNull(response.getChain().getId());
    }


    /// <summary>
    /// Test ChainIdExists
    /// </summary>
    @Test
    public void _020_chainIdExistsTest() throws ApiException {
        IdResponse response = api.chainIdExists(CONTEXT_MULTCHAIN, TEST_CHAIN_ID);
        Assert.assertEquals(response.getExists(), IdResponse.ExistsEnum.TRUE);
    }


    /// <summary>
    /// Test EntryIdExists
    /// </summary>
    @Test
    public void _030_existingEntryByRequest() throws ApiException {
        Entry entry = createEntry(TEST_ENTRY_CONTENT, FIRST_ENTRY_EXTERNAL_ID, SECOND_ENTRY_EXTERNAL_ID);
        AnchoredEntryResponse response = api.entryByRequest(CONTEXT_FACTOM, TEST_CHAIN_ID, entry, null);
        Assert.assertNotNull(response);
        Assert.assertNotNull(response.getAnchoredEntry());
        Assert.assertTrue(response.getAnchorTimes().size() >= 3);
        Assert.assertEquals(AnchoredEntryResponse.AnchorStateEnum.ANCHORED, response.getAnchorState());
    }


    /// <summary>
    /// Test EntryIdExists
    /// </summary>
    @Test(expected = ApiException.class)
    public void _040_nonExistingEntryByRequest() throws ApiException {
        Entry entry = createEntry(TEST_ENTRY_CONTENT, "" + System.currentTimeMillis());
        api.entryByRequest(CONTEXT_MULTCHAIN, TEST_CHAIN_ID, entry, null);
    }


    /// <summary>
    /// Test CreateEntry
    /// </summary>
    @Test
    public void _050_createEntryTest() throws ApiException, InterruptedException {
        Entry entry = createEntry(TEST_ENTRY_CONTENT, "" + System.currentTimeMillis());
        CommittedEntryResponse createResponse = api.createEntry(CONTEXT_MULTCHAIN, TEST_CHAIN_ID, entry, null);
        Assert.assertNotNull(createResponse);
        Assert.assertNotNull(createResponse.getEntry());
        Assert.assertNotNull(createResponse.getCreationRequestTime());

        Thread.sleep(10000); // Should be enough for multichain

        AnchoredEntryResponse entryResponse = api.entryByRequest(CONTEXT_MULTCHAIN, TEST_CHAIN_ID, entry, null);
        Assert.assertNotNull(entryResponse);
        Assert.assertNotNull(entryResponse.getAnchoredEntry());
        Assert.assertTrue(entryResponse.getAnchorTimes().size() >= 0);
        Assert.assertTrue(AnchoredEntryResponse.AnchorStateEnum.ANCHORED == entryResponse.getAnchorState()
                              || AnchoredEntryResponse.AnchorStateEnum.COMMITTED == entryResponse.getAnchorState());
    }


    /// <summary>
    /// Test DetermineChainId
    /// </summary>
    @Test
    public void _060_determineChainIdTest() throws ApiException {
        Chain chain = createChainRequest("Test Content", "first external id", "second external id");
        IdResponse response = api.determineChainId(CONTEXT_FACTOM, chain, true);
    }


    /// <summary>
    /// Test DetermineEntryId
    /// </summary>
    @Test
    public void _070_determineEntryIdTest() throws ApiException {
        Entry entry = createEntry(TEST_ENTRY_CONTENT, FIRST_ENTRY_EXTERNAL_ID, SECOND_ENTRY_EXTERNAL_ID);
        IdResponse response = api.determineEntryId(CONTEXT_FACTOM, TEST_CHAIN_ID, entry, true);
        Assert.assertNotNull(response);
        Assert.assertNotNull(response.getId());
        Assert.assertNotNull(response.getExists());
        Assert.assertEquals(response.getExists(), IdResponse.ExistsEnum.TRUE);
        determinedEntryId = response.getId();
    }


    /// <summary>
    /// Test EntryById
    /// </summary>
    @Test
    public void _080_entryByIdTest() throws ApiException {
        AnchoredEntryResponse response = api.entryById(CONTEXT_FACTOM, TEST_CHAIN_ID, determinedEntryId, null);
        Assert.assertNotNull(response);
        Assert.assertNotNull(response.getAnchoredEntry());
        Assert.assertTrue(response.getAnchorTimes().size() >= 3);
        Assert.assertEquals(AnchoredEntryResponse.AnchorStateEnum.ANCHORED, response.getAnchorState());
    }


    /// <summary>
    /// Test FirstEntry
    /// </summary>
    @Test
    public void _090_firstEntryTest() throws ApiException {
        AnchoredEntryResponse response = api.firstEntry(CONTEXT_FACTOM, TEST_CHAIN_ID);
        Assert.assertNotNull(response);
        Assert.assertNotNull(response.getAnchoredEntry());
        Assert.assertTrue(response.getAnchorTimes().size() >= 0);
        Assert.assertEquals(AnchoredEntryResponse.AnchorStateEnum.ANCHORED, response.getAnchorState());
        //Assert.assertTrue(response.getCurrentAnchorTime.HasValue); // TODO: uncomment when new easy-chains is fixed
        Assert.assertTrue(response.getAnchorTimes().size() > 0);
        firstEntryAnchorTime = response.getAnchorTimes().get(0);
        Assert.assertNotNull(firstEntryAnchorTime);
        firstEntry = response.getAnchoredEntry();
        Assert.assertNotNull(firstEntry);
    }


    /// <summary>
    /// Test NextEntryById
    /// </summary>
    @Test
    public void _100_nextEntryByIdTest() throws ApiException {
        AnchoredEntryResponse response = api.nextEntryById(CONTEXT_FACTOM, TEST_CHAIN_ID, firstEntry.getEntryId(), firstEntryAnchorTime);
        Assert.assertNotNull(response);
        Assert.assertNotNull(response.getAnchoredEntry());
        Assert.assertTrue(response.getAnchorTimes().size() >= 0);
        Assert.assertEquals(AnchoredEntryResponse.AnchorStateEnum.ANCHORED, response.getAnchorState());
        //Assert.assertTrue(response.getCurrentAnchorTime.HasValue); // TODO: uncomment when new easy-chains is fixed
        Assert.assertTrue(response.getAnchorTimes().size() > 0);
        nextEntryAnchorTime = response.getAnchorTimes().get(0);
        Assert.assertNotNull(firstEntryAnchorTime);
        nextEntry = response.getAnchoredEntry();
        Assert.assertNotNull(firstEntry);
    }


    /// <summary>
    /// Test NextEntryByRequest
    /// </summary>
    @Test
    public void _110_NextEntryByRequestTest() throws ApiException {
        AnchoredEntryResponse response = api.nextEntryByRequest(CONTEXT_FACTOM, TEST_CHAIN_ID, firstEntry.getEntry(), firstEntryAnchorTime);
        Assert.assertNotNull(response);
        Assert.assertNotNull(response.getAnchoredEntry());
        Assert.assertTrue(response.getAnchorTimes().size() >= 0);
        Assert.assertEquals(AnchoredEntryResponse.AnchorStateEnum.ANCHORED, response.getAnchorState());
        //Assert.assertTrue(response.getCurrentAnchorTime.HasValue); // TODO: uncomment when new easy-chains is fixed
    }


    /// <summary>
    /// Test PreviousEntryById
    /// </summary>
    @Test
    public void _120_previousEntryByIdTest() throws ApiException {
        AnchoredEntryResponse nextEntryResponse = api.nextEntryById(CONTEXT_FACTOM, TEST_CHAIN_ID, nextEntry.getEntryId(), nextEntryAnchorTime);
        AnchoredEntryResponse response = api.previousEntryById(CONTEXT_FACTOM, TEST_CHAIN_ID, nextEntryResponse.getAnchoredEntry().getEntryId(),
            nextEntryAnchorTime);
        Assert.assertNotNull(response);
        Assert.assertNotNull(response.getAnchoredEntry());
        Assert.assertTrue(response.getAnchorTimes().size() >= 0);
        Assert.assertEquals(AnchoredEntryResponse.AnchorStateEnum.ANCHORED, response.getAnchorState());
        //Assert.assertTrue(response.getCurrentAnchorTime.HasValue); // TODO: uncomment when new easy-chains is fixed
        Assert.assertEquals(response.getAnchoredEntry().getChainId(), nextEntry.getChainId());
        Assert.assertEquals(response.getAnchoredEntry().getEntryId(), nextEntry.getEntryId());
    }


    /// <summary>
    /// Test PreviousEntryByRequest
    /// </summary>
    @Test
    public void _130_previousEntryByRequestTest() throws ApiException {
        AnchoredEntryResponse nextEntryResponse = api.nextEntryById(CONTEXT_FACTOM, TEST_CHAIN_ID, nextEntry.getEntryId(), nextEntryAnchorTime);
        AnchoredEntryResponse response = api.previousEntryByRequest(CONTEXT_FACTOM, TEST_CHAIN_ID, nextEntryResponse.getAnchoredEntry().getEntry(),
            nextEntryAnchorTime);
        Assert.assertNotNull(response);
        Assert.assertNotNull(response.getAnchoredEntry());
        Assert.assertTrue(response.getAnchorTimes().size() >= 0);
        Assert.assertEquals(AnchoredEntryResponse.AnchorStateEnum.ANCHORED, response.getAnchorState());
        //Assert.assertTrue(response.getCurrentAnchorTime.HasValue); // TODO: uncomment when new easy-chains is fixed
        Assert.assertEquals(response.getAnchoredEntry().getChainId(), nextEntry.getChainId());
        Assert.assertEquals(response.getAnchoredEntry().getEntryId(), nextEntry.getEntryId());
    }
}