/*
 * Easy Blockchain API
 * The Easy Blockchain API is an easy to use API to store related entries within chains. Currently it stores entries using a Factom, Ethereum or Multichain blockchain.   For full API documentation please visit: https://docs.sphereon.com/api/easy-blockchain/0.10/html   Interactive testing: A web based test console is available in the Sphereon API store at: https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.blockchain.easy.api;

import com.sphereon.sdk.blockchain.easy.handler.ApiException;
import com.sphereon.sdk.blockchain.easy.model.Backend;
import com.sphereon.sdk.blockchain.easy.model.ErrorResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BackendApi
 */
@Ignore
public class BackendApiTest {

    private final BackendApi api = new BackendApi();

    
    /**
     * Create a new backend
     *
     * Create a new backend. A Backend is the link to one blockchain implementation and it&#39; s nodes. Unless you create your own private blockchain network, you should not have to create a new backend. Just use one of the public backends available.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBackendTest() throws ApiException {
        Backend backend = null;
        Backend response = api.createBackend(backend);

        // TODO: test validations
    }
    
    /**
     * Delete a backend
     *
     * Delete backend by id (not by name)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBackendTest() throws ApiException {
        String backendId = null;
        Backend response = api.deleteBackend(backendId);

        // TODO: test validations
    }
    
    /**
     * Find backends
     *
     * Find existing backend(s) by id (single result) and/or name (multiple results). Optionally including public backends of others. Please note that we never return sensitive information like password or rpc hosts. Even not for backend owners themselves
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findBackendsTest() throws ApiException {
        String backendId = null;
        Boolean includePublic = null;
        List<Backend> response = api.findBackends(backendId, includePublic);

        // TODO: test validations
    }
    
    /**
     * Get backend by id
     *
     * Get existing backend by id (not by name). Optionally including public backend of others. Please note that we never return sensitive information like password or rpc hosts. Even not for backend owners themselves
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBackendTest() throws ApiException {
        String backendId = null;
        Boolean includePublic = null;
        Backend response = api.getBackend(backendId, includePublic);

        // TODO: test validations
    }
    
    /**
     * List backends
     *
     * List existing backends. Optionally including public backends of others.  Please note that we never return sensitive information like password or rpc hosts. Even not for backend owners themselves
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBackendsTest() throws ApiException {
        Boolean includePublic = null;
        List<Backend> response = api.listBackends(includePublic);

        // TODO: test validations
    }
    
}
