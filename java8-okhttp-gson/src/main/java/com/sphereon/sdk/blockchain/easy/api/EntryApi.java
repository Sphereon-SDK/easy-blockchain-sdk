/*
 * Easy Blockchain API
 * <b>The Easy Blockchain API is an easy to use API to store entries within chains. Currently it stores entries using the bitcoin blockchain by means of Factom or Multichain. The latter also allows for a private blockchain. In the future other solutions will be made available</b>    The flow is generally as follows:  1. Make sure a context is available using the / POST endpoint. Normally you only need one context. This is the place where backend providers and blockchain implementations are being specified.  2. Make sure a chain has been created using the /chain POST endpoint. Normally you only need one or a handful of chains. This is a relative expensive operation.  3. Store entries on the chain from step 2. The entries will contain the content and metadata you want to store forever on the specified chain.  4. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.sphereon.sdk.blockchain.easy.api;

import com.sphereon.sdk.blockchain.easy.handler.ApiCallback;
import com.sphereon.sdk.blockchain.easy.handler.ApiClient;
import com.sphereon.sdk.blockchain.easy.handler.ApiException;
import com.sphereon.sdk.blockchain.easy.handler.ApiResponse;
import com.sphereon.sdk.blockchain.easy.handler.Configuration;
import com.sphereon.sdk.blockchain.easy.handler.Pair;
import com.sphereon.sdk.blockchain.easy.handler.ProgressRequestBody;
import com.sphereon.sdk.blockchain.easy.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.sphereon.sdk.blockchain.easy.model.CommittedEntryResponse;
import com.sphereon.sdk.blockchain.easy.model.Entry;
import java.time.OffsetDateTime;
import com.sphereon.sdk.blockchain.easy.model.ErrorResponse;
import com.sphereon.sdk.blockchain.easy.model.AnchoredEntryResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EntryApi {
    private ApiClient apiClient;

    public EntryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EntryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createEntry */
    private com.squareup.okhttp.Call createEntryCall(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = entry;
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling createEntry(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling createEntry(Async)");
        }
        
        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling createEntry(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
        .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (currentAnchorTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currentAnchorTime", currentAnchorTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new entry in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Create a new entry for the specified chain (required)
     * @param currentAnchorTime  (optional)
     * @return CommittedEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommittedEntryResponse createEntry(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime) throws ApiException {
        ApiResponse<CommittedEntryResponse> resp = createEntryWithHttpInfo(context, chainId, entry, currentAnchorTime);
        return resp.getData();
    }

    /**
     * Create a new entry in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Create a new entry for the specified chain (required)
     * @param currentAnchorTime  (optional)
     * @return ApiResponse&lt;CommittedEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommittedEntryResponse> createEntryWithHttpInfo(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime) throws ApiException {
        com.squareup.okhttp.Call call = createEntryCall(context, chainId, entry, currentAnchorTime, null, null);
        Type localVarReturnType = new TypeToken<CommittedEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new entry in the provided chain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Create a new entry for the specified chain (required)
     * @param currentAnchorTime  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEntryAsync(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ApiCallback<CommittedEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEntryCall(context, chainId, entry, currentAnchorTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommittedEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for entryById */
    private com.squareup.okhttp.Call entryByIdCall(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling entryById(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling entryById(Async)");
        }
        
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling entryById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/{entryId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
        .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
        .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (currentAnchorTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currentAnchorTime", currentAnchorTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get an existing entry in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @return AnchoredEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchoredEntryResponse entryById(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime) throws ApiException {
        ApiResponse<AnchoredEntryResponse> resp = entryByIdWithHttpInfo(context, chainId, entryId, currentAnchorTime);
        return resp.getData();
    }

    /**
     * Get an existing entry in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @return ApiResponse&lt;AnchoredEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchoredEntryResponse> entryByIdWithHttpInfo(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime) throws ApiException {
        com.squareup.okhttp.Call call = entryByIdCall(context, chainId, entryId, currentAnchorTime, null, null);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an existing entry in the provided chain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entryByIdAsync(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime, final ApiCallback<AnchoredEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entryByIdCall(context, chainId, entryId, currentAnchorTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for entryByRequest */
    private com.squareup.okhttp.Call entryByRequestCall(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = entry;
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling entryByRequest(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling entryByRequest(Async)");
        }
        
        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling entryByRequest(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/entry".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
        .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (currentAnchorTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currentAnchorTime", currentAnchorTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get an existing entry in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @return AnchoredEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchoredEntryResponse entryByRequest(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime) throws ApiException {
        ApiResponse<AnchoredEntryResponse> resp = entryByRequestWithHttpInfo(context, chainId, entry, currentAnchorTime);
        return resp.getData();
    }

    /**
     * Get an existing entry in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @return ApiResponse&lt;AnchoredEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchoredEntryResponse> entryByRequestWithHttpInfo(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime) throws ApiException {
        com.squareup.okhttp.Call call = entryByRequestCall(context, chainId, entry, currentAnchorTime, null, null);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an existing entry in the provided chain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entryByRequestAsync(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ApiCallback<AnchoredEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entryByRequestCall(context, chainId, entry, currentAnchorTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for firstEntry */
    private com.squareup.okhttp.Call firstEntryCall(String context, String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling firstEntry(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling firstEntry(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/first".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
        .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get the first entry in the provided chain. This is the oldest entry also called the chain tail.  Please note that the achorTimes will only contain the first anchor time. Call getEntry to retrieve all times
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @return AnchoredEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchoredEntryResponse firstEntry(String context, String chainId) throws ApiException {
        ApiResponse<AnchoredEntryResponse> resp = firstEntryWithHttpInfo(context, chainId);
        return resp.getData();
    }

    /**
     * Get the first entry in the provided chain. This is the oldest entry also called the chain tail.  Please note that the achorTimes will only contain the first anchor time. Call getEntry to retrieve all times
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @return ApiResponse&lt;AnchoredEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchoredEntryResponse> firstEntryWithHttpInfo(String context, String chainId) throws ApiException {
        com.squareup.okhttp.Call call = firstEntryCall(context, chainId, null, null);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the first entry in the provided chain. This is the oldest entry also called the chain tail.  Please note that the achorTimes will only contain the first anchor time. Call getEntry to retrieve all times (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call firstEntryAsync(String context, String chainId, final ApiCallback<AnchoredEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = firstEntryCall(context, chainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for lastEntry */
    private com.squareup.okhttp.Call lastEntryCall(String context, String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling lastEntry(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling lastEntry(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/last".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
        .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get the last entry in the provided chain. This is the most recent entry also called the chain head. Please note that the achorTimes will only contain the latest anchor time. Call getEntry to retrieve all times
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @return AnchoredEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchoredEntryResponse lastEntry(String context, String chainId) throws ApiException {
        ApiResponse<AnchoredEntryResponse> resp = lastEntryWithHttpInfo(context, chainId);
        return resp.getData();
    }

    /**
     * Get the last entry in the provided chain. This is the most recent entry also called the chain head. Please note that the achorTimes will only contain the latest anchor time. Call getEntry to retrieve all times
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @return ApiResponse&lt;AnchoredEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchoredEntryResponse> lastEntryWithHttpInfo(String context, String chainId) throws ApiException {
        com.squareup.okhttp.Call call = lastEntryCall(context, chainId, null, null);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the last entry in the provided chain. This is the most recent entry also called the chain head. Please note that the achorTimes will only contain the latest anchor time. Call getEntry to retrieve all times (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lastEntryAsync(String context, String chainId, final ApiCallback<AnchoredEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lastEntryCall(context, chainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for nextEntryById */
    private com.squareup.okhttp.Call nextEntryByIdCall(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling nextEntryById(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling nextEntryById(Async)");
        }
        
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling nextEntryById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/{entryId}/next".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
        .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
        .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (currentAnchorTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currentAnchorTime", currentAnchorTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get the entry after the supplied entry Id (the next) in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @return AnchoredEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchoredEntryResponse nextEntryById(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime) throws ApiException {
        ApiResponse<AnchoredEntryResponse> resp = nextEntryByIdWithHttpInfo(context, chainId, entryId, currentAnchorTime);
        return resp.getData();
    }

    /**
     * Get the entry after the supplied entry Id (the next) in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @return ApiResponse&lt;AnchoredEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchoredEntryResponse> nextEntryByIdWithHttpInfo(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime) throws ApiException {
        com.squareup.okhttp.Call call = nextEntryByIdCall(context, chainId, entryId, currentAnchorTime, null, null);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the entry after the supplied entry Id (the next) in the provided chain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nextEntryByIdAsync(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime, final ApiCallback<AnchoredEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nextEntryByIdCall(context, chainId, entryId, currentAnchorTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for nextEntryByRequest */
    private com.squareup.okhttp.Call nextEntryByRequestCall(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = entry;
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling nextEntryByRequest(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling nextEntryByRequest(Async)");
        }
        
        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling nextEntryByRequest(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/entry/next".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
        .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (currentAnchorTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currentAnchorTime", currentAnchorTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get the entry after the supplied entry Id (the next) in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @return AnchoredEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchoredEntryResponse nextEntryByRequest(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime) throws ApiException {
        ApiResponse<AnchoredEntryResponse> resp = nextEntryByRequestWithHttpInfo(context, chainId, entry, currentAnchorTime);
        return resp.getData();
    }

    /**
     * Get the entry after the supplied entry Id (the next) in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @return ApiResponse&lt;AnchoredEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchoredEntryResponse> nextEntryByRequestWithHttpInfo(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime) throws ApiException {
        com.squareup.okhttp.Call call = nextEntryByRequestCall(context, chainId, entry, currentAnchorTime, null, null);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the entry after the supplied entry Id (the next) in the provided chain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nextEntryByRequestAsync(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ApiCallback<AnchoredEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nextEntryByRequestCall(context, chainId, entry, currentAnchorTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for previousEntryById */
    private com.squareup.okhttp.Call previousEntryByIdCall(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling previousEntryById(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling previousEntryById(Async)");
        }
        
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling previousEntryById(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/{entryId}/previous".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
        .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
        .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (currentAnchorTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currentAnchorTime", currentAnchorTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get the entry before the supplied entry Id (the previous) in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @return AnchoredEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchoredEntryResponse previousEntryById(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime) throws ApiException {
        ApiResponse<AnchoredEntryResponse> resp = previousEntryByIdWithHttpInfo(context, chainId, entryId, currentAnchorTime);
        return resp.getData();
    }

    /**
     * Get the entry before the supplied entry Id (the previous) in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @return ApiResponse&lt;AnchoredEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchoredEntryResponse> previousEntryByIdWithHttpInfo(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime) throws ApiException {
        com.squareup.okhttp.Call call = previousEntryByIdCall(context, chainId, entryId, currentAnchorTime, null, null);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the entry before the supplied entry Id (the previous) in the provided chain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call previousEntryByIdAsync(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime, final ApiCallback<AnchoredEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = previousEntryByIdCall(context, chainId, entryId, currentAnchorTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for previousEntryByRequest */
    private com.squareup.okhttp.Call previousEntryByRequestCall(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = entry;
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling previousEntryByRequest(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling previousEntryByRequest(Async)");
        }
        
        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling previousEntryByRequest(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/entry/previous".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
        .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (currentAnchorTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currentAnchorTime", currentAnchorTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get the entry before the supplied entry Id (the previous) in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @return AnchoredEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchoredEntryResponse previousEntryByRequest(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime) throws ApiException {
        ApiResponse<AnchoredEntryResponse> resp = previousEntryByRequestWithHttpInfo(context, chainId, entry, currentAnchorTime);
        return resp.getData();
    }

    /**
     * Get the entry before the supplied entry Id (the previous) in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @return ApiResponse&lt;AnchoredEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchoredEntryResponse> previousEntryByRequestWithHttpInfo(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime) throws ApiException {
        com.squareup.okhttp.Call call = previousEntryByRequestCall(context, chainId, entry, currentAnchorTime, null, null);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the entry before the supplied entry Id (the previous) in the provided chain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call previousEntryByRequestAsync(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ApiCallback<AnchoredEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = previousEntryByRequestCall(context, chainId, entry, currentAnchorTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
