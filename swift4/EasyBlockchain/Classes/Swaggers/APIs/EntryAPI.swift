//
// EntryAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class EntryAPI {
    /**
     Create a new entry in the provided chain
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 
     - parameter entry: (body) Create a new entry for the specified chain 
     - parameter currentAnchorTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createEntry(context: String, chainId: String, entry: Entry, currentAnchorTime: Date? = nil, completion: @escaping ((_ data: CommittedEntryResponse?,_ error: Error?) -> Void)) {
        createEntryWithRequestBuilder(context: context, chainId: chainId, entry: entry, currentAnchorTime: currentAnchorTime).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a new entry in the provided chain
     - POST /{context}/chains/{chainId}/entries
     - Create a new entry in the provided chain. The entry will be linked to the previous entry. If the entry already exists, the API will add an anchor time, since the entry Id would be the same as the previously registered entry
     - OAuth:
       - type: oauth2
       - name: oauth2schema
     - examples: [{contentType=application/json;charset=UTF-8, example={
  "entry" : {
    "entry" : {
      "entryData" : {
        "externalIds" : [ {
          "value" : "aeiou"
        } ],
        "content" : "aeiou"
      }
    },
    "chainId" : "aeiou",
    "rawBackendStructure" : "aeiou",
    "entryId" : "aeiou"
  },
  "commitTime" : "2000-01-23T04:56:07.000+00:00",
  "creationRequestTime" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 
     - parameter entry: (body) Create a new entry for the specified chain 
     - parameter currentAnchorTime: (query)  (optional)

     - returns: RequestBuilder<CommittedEntryResponse> 
     */
    open class func createEntryWithRequestBuilder(context: String, chainId: String, entry: Entry, currentAnchorTime: Date? = nil) -> RequestBuilder<CommittedEntryResponse> {
        var path = "/{context}/chains/{chainId}/entries"
        path = path.replacingOccurrences(of: "{context}", with: "\(context)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{chainId}", with: "\(chainId)", options: .literal, range: nil)
        let URLString = EasyBlockchainAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: entry)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currentAnchorTime": currentAnchorTime?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<CommittedEntryResponse>.Type = EasyBlockchainAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get an existing entry in the provided chain
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 
     - parameter entryId: (path) entryId 
     - parameter currentAnchorTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func entryById(context: String, chainId: String, entryId: String, currentAnchorTime: Date? = nil, completion: @escaping ((_ data: AnchoredEntryResponse?,_ error: Error?) -> Void)) {
        entryByIdWithRequestBuilder(context: context, chainId: chainId, entryId: entryId, currentAnchorTime: currentAnchorTime).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get an existing entry in the provided chain
     - GET /{context}/chains/{chainId}/entries/{entryId}
     - Get an existing entry in the provided chain
     - OAuth:
       - type: oauth2
       - name: oauth2schema
     - examples: [{contentType=application/json;charset=UTF-8, example={
  "anchoredEntry" : {
    "entry" : {
      "entryData" : {
        "externalIds" : [ {
          "value" : "aeiou"
        } ],
        "content" : "aeiou"
      }
    },
    "chainId" : "aeiou",
    "rawBackendStructure" : "aeiou",
    "entryId" : "aeiou"
  },
  "anchorTimes" : [ "2000-01-23T04:56:07.000+00:00" ],
  "currentAnchorTime" : "2000-01-23T04:56:07.000+00:00",
  "anchorState" : "REQUESTED",
  "lastAnchorTime" : "2000-01-23T04:56:07.000+00:00",
  "firstAnchorTime" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 
     - parameter entryId: (path) entryId 
     - parameter currentAnchorTime: (query)  (optional)

     - returns: RequestBuilder<AnchoredEntryResponse> 
     */
    open class func entryByIdWithRequestBuilder(context: String, chainId: String, entryId: String, currentAnchorTime: Date? = nil) -> RequestBuilder<AnchoredEntryResponse> {
        var path = "/{context}/chains/{chainId}/entries/{entryId}"
        path = path.replacingOccurrences(of: "{context}", with: "\(context)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{chainId}", with: "\(chainId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{entryId}", with: "\(entryId)", options: .literal, range: nil)
        let URLString = EasyBlockchainAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currentAnchorTime": currentAnchorTime?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<AnchoredEntryResponse>.Type = EasyBlockchainAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an existing entry in the provided chain
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 
     - parameter entry: (body) Retrieve the entry 
     - parameter currentAnchorTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func entryByRequest(context: String, chainId: String, entry: Entry, currentAnchorTime: Date? = nil, completion: @escaping ((_ data: AnchoredEntryResponse?,_ error: Error?) -> Void)) {
        entryByRequestWithRequestBuilder(context: context, chainId: chainId, entry: entry, currentAnchorTime: currentAnchorTime).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get an existing entry in the provided chain
     - POST /{context}/chains/{chainId}/entries/entry
     - Get an existing entry in the provided chain
     - OAuth:
       - type: oauth2
       - name: oauth2schema
     - examples: [{contentType=application/json;charset=UTF-8, example={
  "anchoredEntry" : {
    "entry" : {
      "entryData" : {
        "externalIds" : [ {
          "value" : "aeiou"
        } ],
        "content" : "aeiou"
      }
    },
    "chainId" : "aeiou",
    "rawBackendStructure" : "aeiou",
    "entryId" : "aeiou"
  },
  "anchorTimes" : [ "2000-01-23T04:56:07.000+00:00" ],
  "currentAnchorTime" : "2000-01-23T04:56:07.000+00:00",
  "anchorState" : "REQUESTED",
  "lastAnchorTime" : "2000-01-23T04:56:07.000+00:00",
  "firstAnchorTime" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 
     - parameter entry: (body) Retrieve the entry 
     - parameter currentAnchorTime: (query)  (optional)

     - returns: RequestBuilder<AnchoredEntryResponse> 
     */
    open class func entryByRequestWithRequestBuilder(context: String, chainId: String, entry: Entry, currentAnchorTime: Date? = nil) -> RequestBuilder<AnchoredEntryResponse> {
        var path = "/{context}/chains/{chainId}/entries/entry"
        path = path.replacingOccurrences(of: "{context}", with: "\(context)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{chainId}", with: "\(chainId)", options: .literal, range: nil)
        let URLString = EasyBlockchainAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: entry)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currentAnchorTime": currentAnchorTime?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<AnchoredEntryResponse>.Type = EasyBlockchainAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get the first entry in the provided chain
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func firstEntry(context: String, chainId: String, completion: @escaping ((_ data: AnchoredEntryResponse?,_ error: Error?) -> Void)) {
        firstEntryWithRequestBuilder(context: context, chainId: chainId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get the first entry in the provided chain
     - GET /{context}/chains/{chainId}/entries/first
     - Get the first entry in the provided chain. This is the oldest entry also called the chain tail.  Please note that the achorTimes will only contain the first anchor time. Call getEntry to retrieve all times
     - OAuth:
       - type: oauth2
       - name: oauth2schema
     - examples: [{contentType=application/json;charset=UTF-8, example={
  "anchoredEntry" : {
    "entry" : {
      "entryData" : {
        "externalIds" : [ {
          "value" : "aeiou"
        } ],
        "content" : "aeiou"
      }
    },
    "chainId" : "aeiou",
    "rawBackendStructure" : "aeiou",
    "entryId" : "aeiou"
  },
  "anchorTimes" : [ "2000-01-23T04:56:07.000+00:00" ],
  "currentAnchorTime" : "2000-01-23T04:56:07.000+00:00",
  "anchorState" : "REQUESTED",
  "lastAnchorTime" : "2000-01-23T04:56:07.000+00:00",
  "firstAnchorTime" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 

     - returns: RequestBuilder<AnchoredEntryResponse> 
     */
    open class func firstEntryWithRequestBuilder(context: String, chainId: String) -> RequestBuilder<AnchoredEntryResponse> {
        var path = "/{context}/chains/{chainId}/entries/first"
        path = path.replacingOccurrences(of: "{context}", with: "\(context)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{chainId}", with: "\(chainId)", options: .literal, range: nil)
        let URLString = EasyBlockchainAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AnchoredEntryResponse>.Type = EasyBlockchainAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the last entry in the provided chain.
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func lastEntry(context: String, chainId: String, completion: @escaping ((_ data: AnchoredEntryResponse?,_ error: Error?) -> Void)) {
        lastEntryWithRequestBuilder(context: context, chainId: chainId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get the last entry in the provided chain.
     - GET /{context}/chains/{chainId}/entries/last
     - Get the last entry in the provided chain. This is the most recent entry also called the chain head. Please note that the achorTimes will only contain the latest anchor time. Call getEntry to retrieve all times
     - OAuth:
       - type: oauth2
       - name: oauth2schema
     - examples: [{contentType=application/json;charset=UTF-8, example={
  "anchoredEntry" : {
    "entry" : {
      "entryData" : {
        "externalIds" : [ {
          "value" : "aeiou"
        } ],
        "content" : "aeiou"
      }
    },
    "chainId" : "aeiou",
    "rawBackendStructure" : "aeiou",
    "entryId" : "aeiou"
  },
  "anchorTimes" : [ "2000-01-23T04:56:07.000+00:00" ],
  "currentAnchorTime" : "2000-01-23T04:56:07.000+00:00",
  "anchorState" : "REQUESTED",
  "lastAnchorTime" : "2000-01-23T04:56:07.000+00:00",
  "firstAnchorTime" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 

     - returns: RequestBuilder<AnchoredEntryResponse> 
     */
    open class func lastEntryWithRequestBuilder(context: String, chainId: String) -> RequestBuilder<AnchoredEntryResponse> {
        var path = "/{context}/chains/{chainId}/entries/last"
        path = path.replacingOccurrences(of: "{context}", with: "\(context)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{chainId}", with: "\(chainId)", options: .literal, range: nil)
        let URLString = EasyBlockchainAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AnchoredEntryResponse>.Type = EasyBlockchainAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the entry after the supplied entry Id (the next) in the provided chain
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 
     - parameter entryId: (path) entryId 
     - parameter currentAnchorTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func nextEntryById(context: String, chainId: String, entryId: String, currentAnchorTime: Date? = nil, completion: @escaping ((_ data: AnchoredEntryResponse?,_ error: Error?) -> Void)) {
        nextEntryByIdWithRequestBuilder(context: context, chainId: chainId, entryId: entryId, currentAnchorTime: currentAnchorTime).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get the entry after the supplied entry Id (the next) in the provided chain
     - GET /{context}/chains/{chainId}/entries/{entryId}/next
     - Get the entry after the supplied entry Id (the next) in the provided chain
     - OAuth:
       - type: oauth2
       - name: oauth2schema
     - examples: [{contentType=application/json;charset=UTF-8, example={
  "anchoredEntry" : {
    "entry" : {
      "entryData" : {
        "externalIds" : [ {
          "value" : "aeiou"
        } ],
        "content" : "aeiou"
      }
    },
    "chainId" : "aeiou",
    "rawBackendStructure" : "aeiou",
    "entryId" : "aeiou"
  },
  "anchorTimes" : [ "2000-01-23T04:56:07.000+00:00" ],
  "currentAnchorTime" : "2000-01-23T04:56:07.000+00:00",
  "anchorState" : "REQUESTED",
  "lastAnchorTime" : "2000-01-23T04:56:07.000+00:00",
  "firstAnchorTime" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 
     - parameter entryId: (path) entryId 
     - parameter currentAnchorTime: (query)  (optional)

     - returns: RequestBuilder<AnchoredEntryResponse> 
     */
    open class func nextEntryByIdWithRequestBuilder(context: String, chainId: String, entryId: String, currentAnchorTime: Date? = nil) -> RequestBuilder<AnchoredEntryResponse> {
        var path = "/{context}/chains/{chainId}/entries/{entryId}/next"
        path = path.replacingOccurrences(of: "{context}", with: "\(context)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{chainId}", with: "\(chainId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{entryId}", with: "\(entryId)", options: .literal, range: nil)
        let URLString = EasyBlockchainAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currentAnchorTime": currentAnchorTime?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<AnchoredEntryResponse>.Type = EasyBlockchainAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the entry after the supplied entry Id (the next) in the provided chain
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 
     - parameter entry: (body) Retrieve the entry 
     - parameter currentAnchorTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func nextEntryByRequest(context: String, chainId: String, entry: Entry, currentAnchorTime: Date? = nil, completion: @escaping ((_ data: AnchoredEntryResponse?,_ error: Error?) -> Void)) {
        nextEntryByRequestWithRequestBuilder(context: context, chainId: chainId, entry: entry, currentAnchorTime: currentAnchorTime).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get the entry after the supplied entry Id (the next) in the provided chain
     - POST /{context}/chains/{chainId}/entries/entry/next
     - Get the entry after the supplied entry Id (the next) in the provided chain
     - OAuth:
       - type: oauth2
       - name: oauth2schema
     - examples: [{contentType=application/json;charset=UTF-8, example={
  "anchoredEntry" : {
    "entry" : {
      "entryData" : {
        "externalIds" : [ {
          "value" : "aeiou"
        } ],
        "content" : "aeiou"
      }
    },
    "chainId" : "aeiou",
    "rawBackendStructure" : "aeiou",
    "entryId" : "aeiou"
  },
  "anchorTimes" : [ "2000-01-23T04:56:07.000+00:00" ],
  "currentAnchorTime" : "2000-01-23T04:56:07.000+00:00",
  "anchorState" : "REQUESTED",
  "lastAnchorTime" : "2000-01-23T04:56:07.000+00:00",
  "firstAnchorTime" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 
     - parameter entry: (body) Retrieve the entry 
     - parameter currentAnchorTime: (query)  (optional)

     - returns: RequestBuilder<AnchoredEntryResponse> 
     */
    open class func nextEntryByRequestWithRequestBuilder(context: String, chainId: String, entry: Entry, currentAnchorTime: Date? = nil) -> RequestBuilder<AnchoredEntryResponse> {
        var path = "/{context}/chains/{chainId}/entries/entry/next"
        path = path.replacingOccurrences(of: "{context}", with: "\(context)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{chainId}", with: "\(chainId)", options: .literal, range: nil)
        let URLString = EasyBlockchainAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: entry)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currentAnchorTime": currentAnchorTime?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<AnchoredEntryResponse>.Type = EasyBlockchainAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get the entry before the supplied entry Id (the previous) in the provided chain
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 
     - parameter entryId: (path) entryId 
     - parameter currentAnchorTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func previousEntryById(context: String, chainId: String, entryId: String, currentAnchorTime: Date? = nil, completion: @escaping ((_ data: AnchoredEntryResponse?,_ error: Error?) -> Void)) {
        previousEntryByIdWithRequestBuilder(context: context, chainId: chainId, entryId: entryId, currentAnchorTime: currentAnchorTime).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get the entry before the supplied entry Id (the previous) in the provided chain
     - GET /{context}/chains/{chainId}/entries/{entryId}/previous
     - Get the entry before the supplied entry Id (the previous) in the provided chain
     - OAuth:
       - type: oauth2
       - name: oauth2schema
     - examples: [{contentType=application/json;charset=UTF-8, example={
  "anchoredEntry" : {
    "entry" : {
      "entryData" : {
        "externalIds" : [ {
          "value" : "aeiou"
        } ],
        "content" : "aeiou"
      }
    },
    "chainId" : "aeiou",
    "rawBackendStructure" : "aeiou",
    "entryId" : "aeiou"
  },
  "anchorTimes" : [ "2000-01-23T04:56:07.000+00:00" ],
  "currentAnchorTime" : "2000-01-23T04:56:07.000+00:00",
  "anchorState" : "REQUESTED",
  "lastAnchorTime" : "2000-01-23T04:56:07.000+00:00",
  "firstAnchorTime" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 
     - parameter entryId: (path) entryId 
     - parameter currentAnchorTime: (query)  (optional)

     - returns: RequestBuilder<AnchoredEntryResponse> 
     */
    open class func previousEntryByIdWithRequestBuilder(context: String, chainId: String, entryId: String, currentAnchorTime: Date? = nil) -> RequestBuilder<AnchoredEntryResponse> {
        var path = "/{context}/chains/{chainId}/entries/{entryId}/previous"
        path = path.replacingOccurrences(of: "{context}", with: "\(context)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{chainId}", with: "\(chainId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{entryId}", with: "\(entryId)", options: .literal, range: nil)
        let URLString = EasyBlockchainAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currentAnchorTime": currentAnchorTime?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<AnchoredEntryResponse>.Type = EasyBlockchainAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the entry before the supplied entry Id (the previous) in the provided chain
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 
     - parameter entry: (body) Retrieve the entry 
     - parameter currentAnchorTime: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func previousEntryByRequest(context: String, chainId: String, entry: Entry, currentAnchorTime: Date? = nil, completion: @escaping ((_ data: AnchoredEntryResponse?,_ error: Error?) -> Void)) {
        previousEntryByRequestWithRequestBuilder(context: context, chainId: chainId, entry: entry, currentAnchorTime: currentAnchorTime).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get the entry before the supplied entry Id (the previous) in the provided chain
     - POST /{context}/chains/{chainId}/entries/entry/previous
     - Get the entry before the supplied entry Id (the previous) in the provided chain
     - OAuth:
       - type: oauth2
       - name: oauth2schema
     - examples: [{contentType=application/json;charset=UTF-8, example={
  "anchoredEntry" : {
    "entry" : {
      "entryData" : {
        "externalIds" : [ {
          "value" : "aeiou"
        } ],
        "content" : "aeiou"
      }
    },
    "chainId" : "aeiou",
    "rawBackendStructure" : "aeiou",
    "entryId" : "aeiou"
  },
  "anchorTimes" : [ "2000-01-23T04:56:07.000+00:00" ],
  "currentAnchorTime" : "2000-01-23T04:56:07.000+00:00",
  "anchorState" : "REQUESTED",
  "lastAnchorTime" : "2000-01-23T04:56:07.000+00:00",
  "firstAnchorTime" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter context: (path) context 
     - parameter chainId: (path) chainId 
     - parameter entry: (body) Retrieve the entry 
     - parameter currentAnchorTime: (query)  (optional)

     - returns: RequestBuilder<AnchoredEntryResponse> 
     */
    open class func previousEntryByRequestWithRequestBuilder(context: String, chainId: String, entry: Entry, currentAnchorTime: Date? = nil) -> RequestBuilder<AnchoredEntryResponse> {
        var path = "/{context}/chains/{chainId}/entries/entry/previous"
        path = path.replacingOccurrences(of: "{context}", with: "\(context)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{chainId}", with: "\(chainId)", options: .literal, range: nil)
        let URLString = EasyBlockchainAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: entry)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "currentAnchorTime": currentAnchorTime?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<AnchoredEntryResponse>.Type = EasyBlockchainAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
