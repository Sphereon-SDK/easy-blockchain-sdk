<?php
/**
 * ChainApi
 * PHP version 5
 *
 * @category Class
 * @package  Sphereon\SDK\Blockchain\Easy
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Easy Blockchain API
 *
 * The Easy Blockchain API is an easy to use API to store related entries within chains. Currently it stores entries using a Factom, Ethereum or Multichain blockchain.   For full API documentation please visit: https://docs.sphereon.com/api/easy-blockchain/0.10/html   Interactive testing: A web based test console is available in the Sphereon API store at: https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sphereon\SDK\Blockchain\Easy\Api;

use \Sphereon\SDK\Blockchain\Easy\ApiClient;
use \Sphereon\SDK\Blockchain\Easy\ApiException;
use \Sphereon\SDK\Blockchain\Easy\Configuration;
use \Sphereon\SDK\Blockchain\Easy\ObjectSerializer;

/**
 * ChainApi Class Doc Comment
 *
 * @category Class
 * @package  Sphereon\SDK\Blockchain\Easy
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChainApi
{
    /**
     * API Client
     *
     * @var \Sphereon\SDK\Blockchain\Easy\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Sphereon\SDK\Blockchain\Easy\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Sphereon\SDK\Blockchain\Easy\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Sphereon\SDK\Blockchain\Easy\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Sphereon\SDK\Blockchain\Easy\ApiClient $apiClient set the API client
     *
     * @return ChainApi
     */
    public function setApiClient(\Sphereon\SDK\Blockchain\Easy\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createChain
     *
     * Create a new chain
     *
     * @param string $context context (required)
     * @param \Sphereon\SDK\Blockchain\Easy\Model\Chain $chain Create a chain using the first entry supplied. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network! (required)
     * @throws \Sphereon\SDK\Blockchain\Easy\ApiException on non-2xx response
     * @return \Sphereon\SDK\Blockchain\Easy\Model\CommittedChainResponse
     */
    public function createChain($context, $chain)
    {
        list($response) = $this->createChainWithHttpInfo($context, $chain);
        return $response;
    }

    /**
     * Operation createChainWithHttpInfo
     *
     * Create a new chain
     *
     * @param string $context context (required)
     * @param \Sphereon\SDK\Blockchain\Easy\Model\Chain $chain Create a chain using the first entry supplied. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network! (required)
     * @throws \Sphereon\SDK\Blockchain\Easy\ApiException on non-2xx response
     * @return array of \Sphereon\SDK\Blockchain\Easy\Model\CommittedChainResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createChainWithHttpInfo($context, $chain)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling createChain');
        }
        // verify the required parameter 'chain' is set
        if ($chain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chain when calling createChain');
        }
        // parse inputs
        $resourcePath = "/{context}/chains";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=UTF-8']);

        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($chain)) {
            $_tempBody = $chain;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Sphereon\SDK\Blockchain\Easy\Model\CommittedChainResponse',
                '/{context}/chains'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Sphereon\SDK\Blockchain\Easy\Model\CommittedChainResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\CommittedChainResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\CommittedChainResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
