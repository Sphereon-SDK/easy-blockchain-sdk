<?php
/**
 * AllApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Easy Blockchain API
 *
 * The Easy Blockchain API is an easy to use API to store related entries within chains. Currently it stores entries using a Factom, Ethereum or Multichain blockchain.   For full API documentation please visit: https://docs.sphereon.com/api/easy-blockchain/0.10/html   Interactive testing: A web based test console is available in the Sphereon API store at: https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * AllApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AllApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return AllApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation chainIdExists
     *
     * Determine chain id exists
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\IdResponse
     */
    public function chainIdExists($context, $chain_id)
    {
        list($response) = $this->chainIdExistsWithHttpInfo($context, $chain_id);
        return $response;
    }

    /**
     * Operation chainIdExistsWithHttpInfo
     *
     * Determine chain id exists
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\IdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function chainIdExistsWithHttpInfo($context, $chain_id)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling chainIdExists');
        }
        // verify the required parameter 'chain_id' is set
        if ($chain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chain_id when calling chainIdExists');
        }
        // parse inputs
        $resourcePath = "/{context}/chains/id/{chainId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                "{" . "chainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($chain_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\IdResponse',
                '/{context}/chains/id/{chainId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\IdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\IdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createBackend
     *
     * Create a new backend
     *
     * @param \Swagger\Client\Model\Backend $backend backend (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Backend
     */
    public function createBackend($backend)
    {
        list($response) = $this->createBackendWithHttpInfo($backend);
        return $response;
    }

    /**
     * Operation createBackendWithHttpInfo
     *
     * Create a new backend
     *
     * @param \Swagger\Client\Model\Backend $backend backend (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Backend, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBackendWithHttpInfo($backend)
    {
        // verify the required parameter 'backend' is set
        if ($backend === null) {
            throw new \InvalidArgumentException('Missing the required parameter $backend when calling createBackend');
        }
        // parse inputs
        $resourcePath = "/backends";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=UTF-8']);

        // body params
        $_tempBody = null;
        if (isset($backend)) {
            $_tempBody = $backend;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Backend',
                '/backends'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Backend', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Backend', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createChain
     *
     * Create a new chain
     *
     * @param string $context context (required)
     * @param \Swagger\Client\Model\Chain $chain Create a chain using the first entry supplied. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network! (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CommittedChainResponse
     */
    public function createChain($context, $chain)
    {
        list($response) = $this->createChainWithHttpInfo($context, $chain);
        return $response;
    }

    /**
     * Operation createChainWithHttpInfo
     *
     * Create a new chain
     *
     * @param string $context context (required)
     * @param \Swagger\Client\Model\Chain $chain Create a chain using the first entry supplied. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network! (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CommittedChainResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createChainWithHttpInfo($context, $chain)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling createChain');
        }
        // verify the required parameter 'chain' is set
        if ($chain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chain when calling createChain');
        }
        // parse inputs
        $resourcePath = "/{context}/chains";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=UTF-8']);

        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($chain)) {
            $_tempBody = $chain;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CommittedChainResponse',
                '/{context}/chains'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CommittedChainResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CommittedChainResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CommittedChainResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createContext
     *
     * Create context
     *
     * @param \Swagger\Client\Model\Context $context context (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Context
     */
    public function createContext($context)
    {
        list($response) = $this->createContextWithHttpInfo($context);
        return $response;
    }

    /**
     * Operation createContextWithHttpInfo
     *
     * Create context
     *
     * @param \Swagger\Client\Model\Context $context context (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Context, HTTP status code, HTTP response headers (array of strings)
     */
    public function createContextWithHttpInfo($context)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling createContext');
        }
        // parse inputs
        $resourcePath = "/contexts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=UTF-8']);

        // body params
        $_tempBody = null;
        if (isset($context)) {
            $_tempBody = $context;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Context',
                '/contexts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Context', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Context', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Context', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createEntry
     *
     * Create a new entry in the provided chain
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param \Swagger\Client\Model\Entry $entry Create a new entry for the specified chain (required)
     * @param \DateTime $current_anchor_time  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CommittedEntryResponse
     */
    public function createEntry($context, $chain_id, $entry, $current_anchor_time = null)
    {
        list($response) = $this->createEntryWithHttpInfo($context, $chain_id, $entry, $current_anchor_time);
        return $response;
    }

    /**
     * Operation createEntryWithHttpInfo
     *
     * Create a new entry in the provided chain
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param \Swagger\Client\Model\Entry $entry Create a new entry for the specified chain (required)
     * @param \DateTime $current_anchor_time  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CommittedEntryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEntryWithHttpInfo($context, $chain_id, $entry, $current_anchor_time = null)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling createEntry');
        }
        // verify the required parameter 'chain_id' is set
        if ($chain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chain_id when calling createEntry');
        }
        // verify the required parameter 'entry' is set
        if ($entry === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entry when calling createEntry');
        }
        // parse inputs
        $resourcePath = "/{context}/chains/{chainId}/entries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=UTF-8']);

        // query params
        if ($current_anchor_time !== null) {
            $queryParams['currentAnchorTime'] = $this->apiClient->getSerializer()->toQueryValue($current_anchor_time);
        }
        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                "{" . "chainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($chain_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($entry)) {
            $_tempBody = $entry;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CommittedEntryResponse',
                '/{context}/chains/{chainId}/entries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CommittedEntryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CommittedEntryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CommittedEntryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteBackend
     *
     * Delete a backend
     *
     * @param string $backend_id backendId (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Backend
     */
    public function deleteBackend($backend_id)
    {
        list($response) = $this->deleteBackendWithHttpInfo($backend_id);
        return $response;
    }

    /**
     * Operation deleteBackendWithHttpInfo
     *
     * Delete a backend
     *
     * @param string $backend_id backendId (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Backend, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBackendWithHttpInfo($backend_id)
    {
        // verify the required parameter 'backend_id' is set
        if ($backend_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $backend_id when calling deleteBackend');
        }
        // parse inputs
        $resourcePath = "/backends/{backendId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($backend_id !== null) {
            $resourcePath = str_replace(
                "{" . "backendId" . "}",
                $this->apiClient->getSerializer()->toPathValue($backend_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Backend',
                '/backends/{backendId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Backend', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Backend', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteContext
     *
     * Delete context
     *
     * @param string $context context (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Context
     */
    public function deleteContext($context)
    {
        list($response) = $this->deleteContextWithHttpInfo($context);
        return $response;
    }

    /**
     * Operation deleteContextWithHttpInfo
     *
     * Delete context
     *
     * @param string $context context (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Context, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContextWithHttpInfo($context)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling deleteContext');
        }
        // parse inputs
        $resourcePath = "/contexts/{context}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Context',
                '/contexts/{context}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Context', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Context', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation determineChainId
     *
     * Predetermine id of chain
     *
     * @param string $context context (required)
     * @param \Swagger\Client\Model\Chain $chain Determine a chain hash. The entry needs at least a (combination of) globally unique external Id in the complete Blockchain network! (required)
     * @param bool $check_existence Check whether the id exists (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\IdResponse
     */
    public function determineChainId($context, $chain, $check_existence = 'false')
    {
        list($response) = $this->determineChainIdWithHttpInfo($context, $chain, $check_existence);
        return $response;
    }

    /**
     * Operation determineChainIdWithHttpInfo
     *
     * Predetermine id of chain
     *
     * @param string $context context (required)
     * @param \Swagger\Client\Model\Chain $chain Determine a chain hash. The entry needs at least a (combination of) globally unique external Id in the complete Blockchain network! (required)
     * @param bool $check_existence Check whether the id exists (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\IdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function determineChainIdWithHttpInfo($context, $chain, $check_existence = 'false')
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling determineChainId');
        }
        // verify the required parameter 'chain' is set
        if ($chain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chain when calling determineChainId');
        }
        // parse inputs
        $resourcePath = "/{context}/chains/id";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=UTF-8']);

        // query params
        if ($check_existence !== null) {
            $queryParams['checkExistence'] = $this->apiClient->getSerializer()->toQueryValue($check_existence);
        }
        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($chain)) {
            $_tempBody = $chain;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\IdResponse',
                '/{context}/chains/id'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\IdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\IdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation determineEntryId
     *
     * Predetermine id of an entry
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param \Swagger\Client\Model\Entry $entry The entry to determine the hash for on the specified chain (required)
     * @param bool $check_existence Check whether the id exists (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\IdResponse
     */
    public function determineEntryId($context, $chain_id, $entry, $check_existence = 'false')
    {
        list($response) = $this->determineEntryIdWithHttpInfo($context, $chain_id, $entry, $check_existence);
        return $response;
    }

    /**
     * Operation determineEntryIdWithHttpInfo
     *
     * Predetermine id of an entry
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param \Swagger\Client\Model\Entry $entry The entry to determine the hash for on the specified chain (required)
     * @param bool $check_existence Check whether the id exists (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\IdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function determineEntryIdWithHttpInfo($context, $chain_id, $entry, $check_existence = 'false')
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling determineEntryId');
        }
        // verify the required parameter 'chain_id' is set
        if ($chain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chain_id when calling determineEntryId');
        }
        // verify the required parameter 'entry' is set
        if ($entry === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entry when calling determineEntryId');
        }
        // parse inputs
        $resourcePath = "/{context}/chains/id/{chainId}/entries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=UTF-8']);

        // query params
        if ($check_existence !== null) {
            $queryParams['checkExistence'] = $this->apiClient->getSerializer()->toQueryValue($check_existence);
        }
        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                "{" . "chainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($chain_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($entry)) {
            $_tempBody = $entry;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\IdResponse',
                '/{context}/chains/id/{chainId}/entries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\IdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\IdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation entryById
     *
     * Get an existing entry in the provided chain
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param string $entry_id entryId (required)
     * @param \DateTime $current_anchor_time  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AnchoredEntryResponse
     */
    public function entryById($context, $chain_id, $entry_id, $current_anchor_time = null)
    {
        list($response) = $this->entryByIdWithHttpInfo($context, $chain_id, $entry_id, $current_anchor_time);
        return $response;
    }

    /**
     * Operation entryByIdWithHttpInfo
     *
     * Get an existing entry in the provided chain
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param string $entry_id entryId (required)
     * @param \DateTime $current_anchor_time  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AnchoredEntryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function entryByIdWithHttpInfo($context, $chain_id, $entry_id, $current_anchor_time = null)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling entryById');
        }
        // verify the required parameter 'chain_id' is set
        if ($chain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chain_id when calling entryById');
        }
        // verify the required parameter 'entry_id' is set
        if ($entry_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entry_id when calling entryById');
        }
        // parse inputs
        $resourcePath = "/{context}/chains/{chainId}/entries/{entryId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($current_anchor_time !== null) {
            $queryParams['currentAnchorTime'] = $this->apiClient->getSerializer()->toQueryValue($current_anchor_time);
        }
        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                "{" . "chainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($chain_id),
                $resourcePath
            );
        }
        // path params
        if ($entry_id !== null) {
            $resourcePath = str_replace(
                "{" . "entryId" . "}",
                $this->apiClient->getSerializer()->toPathValue($entry_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AnchoredEntryResponse',
                '/{context}/chains/{chainId}/entries/{entryId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AnchoredEntryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AnchoredEntryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation entryByRequest
     *
     * Get an existing entry in the provided chain
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param \Swagger\Client\Model\Entry $entry Retrieve the entry (required)
     * @param \DateTime $current_anchor_time  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AnchoredEntryResponse
     */
    public function entryByRequest($context, $chain_id, $entry, $current_anchor_time = null)
    {
        list($response) = $this->entryByRequestWithHttpInfo($context, $chain_id, $entry, $current_anchor_time);
        return $response;
    }

    /**
     * Operation entryByRequestWithHttpInfo
     *
     * Get an existing entry in the provided chain
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param \Swagger\Client\Model\Entry $entry Retrieve the entry (required)
     * @param \DateTime $current_anchor_time  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AnchoredEntryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function entryByRequestWithHttpInfo($context, $chain_id, $entry, $current_anchor_time = null)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling entryByRequest');
        }
        // verify the required parameter 'chain_id' is set
        if ($chain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chain_id when calling entryByRequest');
        }
        // verify the required parameter 'entry' is set
        if ($entry === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entry when calling entryByRequest');
        }
        // parse inputs
        $resourcePath = "/{context}/chains/{chainId}/entries/entry";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($current_anchor_time !== null) {
            $queryParams['currentAnchorTime'] = $this->apiClient->getSerializer()->toQueryValue($current_anchor_time);
        }
        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                "{" . "chainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($chain_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($entry)) {
            $_tempBody = $entry;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AnchoredEntryResponse',
                '/{context}/chains/{chainId}/entries/entry'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AnchoredEntryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AnchoredEntryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AnchoredEntryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation entryIdExists
     *
     * Determine entry id exists
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param string $entry_id entryId (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\IdResponse
     */
    public function entryIdExists($context, $chain_id, $entry_id)
    {
        list($response) = $this->entryIdExistsWithHttpInfo($context, $chain_id, $entry_id);
        return $response;
    }

    /**
     * Operation entryIdExistsWithHttpInfo
     *
     * Determine entry id exists
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param string $entry_id entryId (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\IdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function entryIdExistsWithHttpInfo($context, $chain_id, $entry_id)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling entryIdExists');
        }
        // verify the required parameter 'chain_id' is set
        if ($chain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chain_id when calling entryIdExists');
        }
        // verify the required parameter 'entry_id' is set
        if ($entry_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entry_id when calling entryIdExists');
        }
        // parse inputs
        $resourcePath = "/{context}/chains/id/{chainId}/entries/{entryId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                "{" . "chainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($chain_id),
                $resourcePath
            );
        }
        // path params
        if ($entry_id !== null) {
            $resourcePath = str_replace(
                "{" . "entryId" . "}",
                $this->apiClient->getSerializer()->toPathValue($entry_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\IdResponse',
                '/{context}/chains/id/{chainId}/entries/{entryId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\IdResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\IdResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation findBackends
     *
     * Find backends
     *
     * @param string $backend_id backendId (required)
     * @param bool $include_public includePublic (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Backend[]
     */
    public function findBackends($backend_id, $include_public = 'false')
    {
        list($response) = $this->findBackendsWithHttpInfo($backend_id, $include_public);
        return $response;
    }

    /**
     * Operation findBackendsWithHttpInfo
     *
     * Find backends
     *
     * @param string $backend_id backendId (required)
     * @param bool $include_public includePublic (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Backend[], HTTP status code, HTTP response headers (array of strings)
     */
    public function findBackendsWithHttpInfo($backend_id, $include_public = 'false')
    {
        // verify the required parameter 'backend_id' is set
        if ($backend_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $backend_id when calling findBackends');
        }
        // parse inputs
        $resourcePath = "/backends/{backendId}/find";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_public !== null) {
            $queryParams['includePublic'] = $this->apiClient->getSerializer()->toQueryValue($include_public);
        }
        // path params
        if ($backend_id !== null) {
            $resourcePath = str_replace(
                "{" . "backendId" . "}",
                $this->apiClient->getSerializer()->toPathValue($backend_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Backend[]',
                '/backends/{backendId}/find'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Backend[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Backend[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation firstEntry
     *
     * Get the first entry in the provided chain
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AnchoredEntryResponse
     */
    public function firstEntry($context, $chain_id)
    {
        list($response) = $this->firstEntryWithHttpInfo($context, $chain_id);
        return $response;
    }

    /**
     * Operation firstEntryWithHttpInfo
     *
     * Get the first entry in the provided chain
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AnchoredEntryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function firstEntryWithHttpInfo($context, $chain_id)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling firstEntry');
        }
        // verify the required parameter 'chain_id' is set
        if ($chain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chain_id when calling firstEntry');
        }
        // parse inputs
        $resourcePath = "/{context}/chains/{chainId}/entries/first";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                "{" . "chainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($chain_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AnchoredEntryResponse',
                '/{context}/chains/{chainId}/entries/first'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AnchoredEntryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AnchoredEntryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBackend
     *
     * Get backend by id
     *
     * @param string $backend_id backendId (required)
     * @param bool $include_public includePublic (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Backend
     */
    public function getBackend($backend_id, $include_public = 'false')
    {
        list($response) = $this->getBackendWithHttpInfo($backend_id, $include_public);
        return $response;
    }

    /**
     * Operation getBackendWithHttpInfo
     *
     * Get backend by id
     *
     * @param string $backend_id backendId (required)
     * @param bool $include_public includePublic (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Backend, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBackendWithHttpInfo($backend_id, $include_public = 'false')
    {
        // verify the required parameter 'backend_id' is set
        if ($backend_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $backend_id when calling getBackend');
        }
        // parse inputs
        $resourcePath = "/backends/{backendId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_public !== null) {
            $queryParams['includePublic'] = $this->apiClient->getSerializer()->toQueryValue($include_public);
        }
        // path params
        if ($backend_id !== null) {
            $resourcePath = str_replace(
                "{" . "backendId" . "}",
                $this->apiClient->getSerializer()->toPathValue($backend_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Backend',
                '/backends/{backendId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Backend', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Backend', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getContext
     *
     * Get context
     *
     * @param string $context context (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Context
     */
    public function getContext($context)
    {
        list($response) = $this->getContextWithHttpInfo($context);
        return $response;
    }

    /**
     * Operation getContextWithHttpInfo
     *
     * Get context
     *
     * @param string $context context (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Context, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContextWithHttpInfo($context)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling getContext');
        }
        // parse inputs
        $resourcePath = "/contexts/{context}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Context',
                '/contexts/{context}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Context', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Context', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lastEntry
     *
     * Get the last entry in the provided chain.
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AnchoredEntryResponse
     */
    public function lastEntry($context, $chain_id)
    {
        list($response) = $this->lastEntryWithHttpInfo($context, $chain_id);
        return $response;
    }

    /**
     * Operation lastEntryWithHttpInfo
     *
     * Get the last entry in the provided chain.
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AnchoredEntryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function lastEntryWithHttpInfo($context, $chain_id)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling lastEntry');
        }
        // verify the required parameter 'chain_id' is set
        if ($chain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chain_id when calling lastEntry');
        }
        // parse inputs
        $resourcePath = "/{context}/chains/{chainId}/entries/last";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                "{" . "chainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($chain_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AnchoredEntryResponse',
                '/{context}/chains/{chainId}/entries/last'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AnchoredEntryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AnchoredEntryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listBackends
     *
     * List backends
     *
     * @param bool $include_public includePublic (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Backend[]
     */
    public function listBackends($include_public = 'false')
    {
        list($response) = $this->listBackendsWithHttpInfo($include_public);
        return $response;
    }

    /**
     * Operation listBackendsWithHttpInfo
     *
     * List backends
     *
     * @param bool $include_public includePublic (optional, default to false)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Backend[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listBackendsWithHttpInfo($include_public = 'false')
    {
        // parse inputs
        $resourcePath = "/backends";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_public !== null) {
            $queryParams['includePublic'] = $this->apiClient->getSerializer()->toQueryValue($include_public);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Backend[]',
                '/backends'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Backend[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Backend[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation nextEntryById
     *
     * Get the entry after the supplied entry Id (the next) in the provided chain
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param string $entry_id entryId (required)
     * @param \DateTime $current_anchor_time  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AnchoredEntryResponse
     */
    public function nextEntryById($context, $chain_id, $entry_id, $current_anchor_time = null)
    {
        list($response) = $this->nextEntryByIdWithHttpInfo($context, $chain_id, $entry_id, $current_anchor_time);
        return $response;
    }

    /**
     * Operation nextEntryByIdWithHttpInfo
     *
     * Get the entry after the supplied entry Id (the next) in the provided chain
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param string $entry_id entryId (required)
     * @param \DateTime $current_anchor_time  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AnchoredEntryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function nextEntryByIdWithHttpInfo($context, $chain_id, $entry_id, $current_anchor_time = null)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling nextEntryById');
        }
        // verify the required parameter 'chain_id' is set
        if ($chain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chain_id when calling nextEntryById');
        }
        // verify the required parameter 'entry_id' is set
        if ($entry_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entry_id when calling nextEntryById');
        }
        // parse inputs
        $resourcePath = "/{context}/chains/{chainId}/entries/{entryId}/next";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($current_anchor_time !== null) {
            $queryParams['currentAnchorTime'] = $this->apiClient->getSerializer()->toQueryValue($current_anchor_time);
        }
        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                "{" . "chainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($chain_id),
                $resourcePath
            );
        }
        // path params
        if ($entry_id !== null) {
            $resourcePath = str_replace(
                "{" . "entryId" . "}",
                $this->apiClient->getSerializer()->toPathValue($entry_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AnchoredEntryResponse',
                '/{context}/chains/{chainId}/entries/{entryId}/next'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AnchoredEntryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AnchoredEntryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation nextEntryByRequest
     *
     * Get the entry after the supplied entry Id (the next) in the provided chain
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param \Swagger\Client\Model\Entry $entry Retrieve the entry (required)
     * @param \DateTime $current_anchor_time  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AnchoredEntryResponse
     */
    public function nextEntryByRequest($context, $chain_id, $entry, $current_anchor_time = null)
    {
        list($response) = $this->nextEntryByRequestWithHttpInfo($context, $chain_id, $entry, $current_anchor_time);
        return $response;
    }

    /**
     * Operation nextEntryByRequestWithHttpInfo
     *
     * Get the entry after the supplied entry Id (the next) in the provided chain
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param \Swagger\Client\Model\Entry $entry Retrieve the entry (required)
     * @param \DateTime $current_anchor_time  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AnchoredEntryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function nextEntryByRequestWithHttpInfo($context, $chain_id, $entry, $current_anchor_time = null)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling nextEntryByRequest');
        }
        // verify the required parameter 'chain_id' is set
        if ($chain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chain_id when calling nextEntryByRequest');
        }
        // verify the required parameter 'entry' is set
        if ($entry === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entry when calling nextEntryByRequest');
        }
        // parse inputs
        $resourcePath = "/{context}/chains/{chainId}/entries/entry/next";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($current_anchor_time !== null) {
            $queryParams['currentAnchorTime'] = $this->apiClient->getSerializer()->toQueryValue($current_anchor_time);
        }
        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                "{" . "chainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($chain_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($entry)) {
            $_tempBody = $entry;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AnchoredEntryResponse',
                '/{context}/chains/{chainId}/entries/entry/next'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AnchoredEntryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AnchoredEntryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AnchoredEntryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation previousEntryById
     *
     * Get the entry before the supplied entry Id (the previous) in the provided chain
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param string $entry_id entryId (required)
     * @param \DateTime $current_anchor_time  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AnchoredEntryResponse
     */
    public function previousEntryById($context, $chain_id, $entry_id, $current_anchor_time = null)
    {
        list($response) = $this->previousEntryByIdWithHttpInfo($context, $chain_id, $entry_id, $current_anchor_time);
        return $response;
    }

    /**
     * Operation previousEntryByIdWithHttpInfo
     *
     * Get the entry before the supplied entry Id (the previous) in the provided chain
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param string $entry_id entryId (required)
     * @param \DateTime $current_anchor_time  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AnchoredEntryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function previousEntryByIdWithHttpInfo($context, $chain_id, $entry_id, $current_anchor_time = null)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling previousEntryById');
        }
        // verify the required parameter 'chain_id' is set
        if ($chain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chain_id when calling previousEntryById');
        }
        // verify the required parameter 'entry_id' is set
        if ($entry_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entry_id when calling previousEntryById');
        }
        // parse inputs
        $resourcePath = "/{context}/chains/{chainId}/entries/{entryId}/previous";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($current_anchor_time !== null) {
            $queryParams['currentAnchorTime'] = $this->apiClient->getSerializer()->toQueryValue($current_anchor_time);
        }
        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                "{" . "chainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($chain_id),
                $resourcePath
            );
        }
        // path params
        if ($entry_id !== null) {
            $resourcePath = str_replace(
                "{" . "entryId" . "}",
                $this->apiClient->getSerializer()->toPathValue($entry_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AnchoredEntryResponse',
                '/{context}/chains/{chainId}/entries/{entryId}/previous'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AnchoredEntryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AnchoredEntryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation previousEntryByRequest
     *
     * Get the entry before the supplied entry Id (the previous) in the provided chain
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param \Swagger\Client\Model\Entry $entry Retrieve the entry (required)
     * @param \DateTime $current_anchor_time  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AnchoredEntryResponse
     */
    public function previousEntryByRequest($context, $chain_id, $entry, $current_anchor_time = null)
    {
        list($response) = $this->previousEntryByRequestWithHttpInfo($context, $chain_id, $entry, $current_anchor_time);
        return $response;
    }

    /**
     * Operation previousEntryByRequestWithHttpInfo
     *
     * Get the entry before the supplied entry Id (the previous) in the provided chain
     *
     * @param string $context context (required)
     * @param string $chain_id chainId (required)
     * @param \Swagger\Client\Model\Entry $entry Retrieve the entry (required)
     * @param \DateTime $current_anchor_time  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AnchoredEntryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function previousEntryByRequestWithHttpInfo($context, $chain_id, $entry, $current_anchor_time = null)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling previousEntryByRequest');
        }
        // verify the required parameter 'chain_id' is set
        if ($chain_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chain_id when calling previousEntryByRequest');
        }
        // verify the required parameter 'entry' is set
        if ($entry === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entry when calling previousEntryByRequest');
        }
        // parse inputs
        $resourcePath = "/{context}/chains/{chainId}/entries/entry/previous";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($current_anchor_time !== null) {
            $queryParams['currentAnchorTime'] = $this->apiClient->getSerializer()->toQueryValue($current_anchor_time);
        }
        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }
        // path params
        if ($chain_id !== null) {
            $resourcePath = str_replace(
                "{" . "chainId" . "}",
                $this->apiClient->getSerializer()->toPathValue($chain_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($entry)) {
            $_tempBody = $entry;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AnchoredEntryResponse',
                '/{context}/chains/{chainId}/entries/entry/previous'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AnchoredEntryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AnchoredEntryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AnchoredEntryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
