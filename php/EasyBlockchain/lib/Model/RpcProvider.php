<?php
/**
 * RpcProvider
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Easy Blockchain API
 *
 * The Easy Blockchain API is an easy to use API to store related entries within chains. Currently it stores entries using a Factom, Ethereum or Multichain blockchain.   For full API documentation please visit: https://docs.sphereon.com/api/easy-blockchain/0.10/html   Interactive testing: A web based test console is available in the Sphereon API store at: https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * RpcProvider Class Doc Comment
 *
 * @category    Class
 * @description RpcProvider
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RpcProvider implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RpcProvider';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'owner_type' => 'string',
        'meta_data' => 'map[string,string]',
        'password' => 'string',
        'access' => '\Swagger\Client\Model\Access',
        'ledger_name' => 'string',
        'resource_files' => 'map[string,string]',
        'wallet_info' => 'string',
        'host' => 'string',
        'id' => 'string',
        'type' => 'string',
        'username' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'owner_type' => null,
        'meta_data' => null,
        'password' => null,
        'access' => null,
        'ledger_name' => null,
        'resource_files' => null,
        'wallet_info' => null,
        'host' => null,
        'id' => null,
        'type' => null,
        'username' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'owner_type' => 'ownerType',
        'meta_data' => 'metaData',
        'password' => 'password',
        'access' => 'access',
        'ledger_name' => 'ledgerName',
        'resource_files' => 'resourceFiles',
        'wallet_info' => 'walletInfo',
        'host' => 'host',
        'id' => 'id',
        'type' => 'type',
        'username' => 'username'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'owner_type' => 'setOwnerType',
        'meta_data' => 'setMetaData',
        'password' => 'setPassword',
        'access' => 'setAccess',
        'ledger_name' => 'setLedgerName',
        'resource_files' => 'setResourceFiles',
        'wallet_info' => 'setWalletInfo',
        'host' => 'setHost',
        'id' => 'setId',
        'type' => 'setType',
        'username' => 'setUsername'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'owner_type' => 'getOwnerType',
        'meta_data' => 'getMetaData',
        'password' => 'getPassword',
        'access' => 'getAccess',
        'ledger_name' => 'getLedgerName',
        'resource_files' => 'getResourceFiles',
        'wallet_info' => 'getWalletInfo',
        'host' => 'getHost',
        'id' => 'getId',
        'type' => 'getType',
        'username' => 'getUsername'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const OWNER_TYPE_PROVIDER = 'PROVIDER';
    const OWNER_TYPE_CUSTOMER = 'CUSTOMER';
    const TYPE_API = 'API';
    const TYPE_WALLET = 'WALLET';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOwnerTypeAllowableValues()
    {
        return [
            self::OWNER_TYPE_PROVIDER,
            self::OWNER_TYPE_CUSTOMER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_API,
            self::TYPE_WALLET,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['owner_type'] = isset($data['owner_type']) ? $data['owner_type'] : null;
        $this->container['meta_data'] = isset($data['meta_data']) ? $data['meta_data'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['access'] = isset($data['access']) ? $data['access'] : null;
        $this->container['ledger_name'] = isset($data['ledger_name']) ? $data['ledger_name'] : null;
        $this->container['resource_files'] = isset($data['resource_files']) ? $data['resource_files'] : null;
        $this->container['wallet_info'] = isset($data['wallet_info']) ? $data['wallet_info'] : null;
        $this->container['host'] = isset($data['host']) ? $data['host'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getOwnerTypeAllowableValues();
        if (!in_array($this->container['owner_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'owner_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getOwnerTypeAllowableValues();
        if (!in_array($this->container['owner_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets owner_type
     * @return string
     */
    public function getOwnerType()
    {
        return $this->container['owner_type'];
    }

    /**
     * Sets owner_type
     * @param string $owner_type
     * @return $this
     */
    public function setOwnerType($owner_type)
    {
        $allowed_values = $this->getOwnerTypeAllowableValues();
        if (!is_null($owner_type) && !in_array($owner_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'owner_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['owner_type'] = $owner_type;

        return $this;
    }

    /**
     * Gets meta_data
     * @return map[string,string]
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     * @param map[string,string] $meta_data
     * @return $this
     */
    public function setMetaData($meta_data)
    {
        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     * @param string $password
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets access
     * @return \Swagger\Client\Model\Access
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     * @param \Swagger\Client\Model\Access $access
     * @return $this
     */
    public function setAccess($access)
    {
        $this->container['access'] = $access;

        return $this;
    }

    /**
     * Gets ledger_name
     * @return string
     */
    public function getLedgerName()
    {
        return $this->container['ledger_name'];
    }

    /**
     * Sets ledger_name
     * @param string $ledger_name
     * @return $this
     */
    public function setLedgerName($ledger_name)
    {
        $this->container['ledger_name'] = $ledger_name;

        return $this;
    }

    /**
     * Gets resource_files
     * @return map[string,string]
     */
    public function getResourceFiles()
    {
        return $this->container['resource_files'];
    }

    /**
     * Sets resource_files
     * @param map[string,string] $resource_files
     * @return $this
     */
    public function setResourceFiles($resource_files)
    {
        $this->container['resource_files'] = $resource_files;

        return $this;
    }

    /**
     * Gets wallet_info
     * @return string
     */
    public function getWalletInfo()
    {
        return $this->container['wallet_info'];
    }

    /**
     * Sets wallet_info
     * @param string $wallet_info
     * @return $this
     */
    public function setWalletInfo($wallet_info)
    {
        $this->container['wallet_info'] = $wallet_info;

        return $this;
    }

    /**
     * Gets host
     * @return string
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     * @param string $host
     * @return $this
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets username
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     * @param string $username
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


