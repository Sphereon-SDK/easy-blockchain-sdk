<?php
/**
 * Backend
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Easy Blockchain API
 *
 * The Easy Blockchain API is an easy to use API to store related entries within chains. Currently it stores entries using a Factom, Ethereum or Multichain blockchain.   For full API documentation please visit: https://docs.sphereon.com/api/easy-blockchain/0.10/html   Interactive testing: A web based test console is available in the Sphereon API store at: https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Backend Class Doc Comment
 *
 * @category    Class
 * @description A backend is a blockchain implementation along with it&#39;s nodes (rpdProviders). You only need a backend when you wish to connect one of the supported blockchain implementations in a private blockchain. Otherwise use one of the public backends for your context
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Backend implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Backend';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rpc_providers' => '\Swagger\Client\Model\RpcProvider[]',
        'api_version' => 'int',
        'name' => 'string',
        'start' => '\DateTime',
        'end' => '\DateTime',
        'data_structure' => 'string',
        'id' => 'string',
        'external_access' => '\Swagger\Client\Model\Access'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rpc_providers' => null,
        'api_version' => 'int32',
        'name' => null,
        'start' => 'date-time',
        'end' => 'date-time',
        'data_structure' => null,
        'id' => null,
        'external_access' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'rpc_providers' => 'rpcProviders',
        'api_version' => 'apiVersion',
        'name' => 'name',
        'start' => 'start',
        'end' => 'end',
        'data_structure' => 'dataStructure',
        'id' => 'id',
        'external_access' => 'externalAccess'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'rpc_providers' => 'setRpcProviders',
        'api_version' => 'setApiVersion',
        'name' => 'setName',
        'start' => 'setStart',
        'end' => 'setEnd',
        'data_structure' => 'setDataStructure',
        'id' => 'setId',
        'external_access' => 'setExternalAccess'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'rpc_providers' => 'getRpcProviders',
        'api_version' => 'getApiVersion',
        'name' => 'getName',
        'start' => 'getStart',
        'end' => 'getEnd',
        'data_structure' => 'getDataStructure',
        'id' => 'getId',
        'external_access' => 'getExternalAccess'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const DATA_STRUCTURE_FACTOM = 'FACTOM';
    const DATA_STRUCTURE_MULTICHAIN = 'MULTICHAIN';
    const DATA_STRUCTURE_ETHEREUM = 'ETHEREUM';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDataStructureAllowableValues()
    {
        return [
            self::DATA_STRUCTURE_FACTOM,
            self::DATA_STRUCTURE_MULTICHAIN,
            self::DATA_STRUCTURE_ETHEREUM,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rpc_providers'] = isset($data['rpc_providers']) ? $data['rpc_providers'] : null;
        $this->container['api_version'] = isset($data['api_version']) ? $data['api_version'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['data_structure'] = isset($data['data_structure']) ? $data['data_structure'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['external_access'] = isset($data['external_access']) ? $data['external_access'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['rpc_providers'] === null) {
            $invalid_properties[] = "'rpc_providers' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        $allowed_values = $this->getDataStructureAllowableValues();
        if (!in_array($this->container['data_structure'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'data_structure', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['rpc_providers'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        $allowed_values = $this->getDataStructureAllowableValues();
        if (!in_array($this->container['data_structure'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets rpc_providers
     * @return \Swagger\Client\Model\RpcProvider[]
     */
    public function getRpcProviders()
    {
        return $this->container['rpc_providers'];
    }

    /**
     * Sets rpc_providers
     * @param \Swagger\Client\Model\RpcProvider[] $rpc_providers One or more nodes that comprise the blockchain backend
     * @return $this
     */
    public function setRpcProviders($rpc_providers)
    {
        $this->container['rpc_providers'] = $rpc_providers;

        return $this;
    }

    /**
     * Gets api_version
     * @return int
     */
    public function getApiVersion()
    {
        return $this->container['api_version'];
    }

    /**
     * Sets api_version
     * @param int $api_version
     * @return $this
     */
    public function setApiVersion($api_version)
    {
        $this->container['api_version'] = $api_version;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The name of the backend.
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets start
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     * @param \DateTime $start
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets end
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     * @param \DateTime $end
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets data_structure
     * @return string
     */
    public function getDataStructure()
    {
        return $this->container['data_structure'];
    }

    /**
     * Sets data_structure
     * @param string $data_structure
     * @return $this
     */
    public function setDataStructure($data_structure)
    {
        $allowed_values = $this->getDataStructureAllowableValues();
        if (!is_null($data_structure) && !in_array($data_structure, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'data_structure', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['data_structure'] = $data_structure;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_access
     * @return \Swagger\Client\Model\Access
     */
    public function getExternalAccess()
    {
        return $this->container['external_access'];
    }

    /**
     * Sets external_access
     * @param \Swagger\Client\Model\Access $external_access
     * @return $this
     */
    public function setExternalAccess($external_access)
    {
        $this->container['external_access'] = $external_access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


