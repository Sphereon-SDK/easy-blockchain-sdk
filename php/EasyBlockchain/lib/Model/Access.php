<?php
/**
 * Access
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sphereon\SDK\Blockchain\Easy
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Easy Blockchain API
 *
 * The Easy Blockchain API is an easy to use API to store related entries within chains. Currently it stores entries using a Factom, Ethereum or Multichain blockchain.   For full API documentation please visit: https://docs.sphereon.com/api/easy-blockchain/0.10/html   Interactive testing: A web based test console is available in the Sphereon API store at: https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sphereon\SDK\Blockchain\Easy\Model;

use \ArrayAccess;

/**
 * Access Class Doc Comment
 *
 * @category    Class
 * @package     Sphereon\SDK\Blockchain\Easy
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Access implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Access';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'modes' => 'string[]',
        'black_list' => 'string[]',
        'white_list' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'modes' => null,
        'black_list' => null,
        'white_list' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'modes' => 'modes',
        'black_list' => 'blackList',
        'white_list' => 'whiteList'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'modes' => 'setModes',
        'black_list' => 'setBlackList',
        'white_list' => 'setWhiteList'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'modes' => 'getModes',
        'black_list' => 'getBlackList',
        'white_list' => 'getWhiteList'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const MODES_NONE = 'NONE';
    const MODES_READ = 'READ';
    const MODES_WRITE = 'WRITE';
    const MODES__PUBLIC = 'PUBLIC';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getModesAllowableValues()
    {
        return [
            self::MODES_NONE,
            self::MODES_READ,
            self::MODES_WRITE,
            self::MODES__PUBLIC,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['modes'] = isset($data['modes']) ? $data['modes'] : null;
        $this->container['black_list'] = isset($data['black_list']) ? $data['black_list'] : null;
        $this->container['white_list'] = isset($data['white_list']) ? $data['white_list'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets modes
     * @return string[]
     */
    public function getModes()
    {
        return $this->container['modes'];
    }

    /**
     * Sets modes
     * @param string[] $modes
     * @return $this
     */
    public function setModes($modes)
    {
        $allowed_values = $this->getModesAllowableValues();
        if (!is_null($modes) && array_diff($modes, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'modes', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['modes'] = $modes;

        return $this;
    }

    /**
     * Gets black_list
     * @return string[]
     */
    public function getBlackList()
    {
        return $this->container['black_list'];
    }

    /**
     * Sets black_list
     * @param string[] $black_list
     * @return $this
     */
    public function setBlackList($black_list)
    {
        $this->container['black_list'] = $black_list;

        return $this;
    }

    /**
     * Gets white_list
     * @return string[]
     */
    public function getWhiteList()
    {
        return $this->container['white_list'];
    }

    /**
     * Sets white_list
     * @param string[] $white_list
     * @return $this
     */
    public function setWhiteList($white_list)
    {
        $this->container['white_list'] = $white_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Sphereon\SDK\Blockchain\Easy\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Sphereon\SDK\Blockchain\Easy\ObjectSerializer::sanitizeForSerialization($this));
    }
}


