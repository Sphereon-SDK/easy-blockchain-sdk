/**
 * Easy Blockchain API
 * <b>The Easy Blockchain API is an easy to use API to store entries within chains. Currently it stores entries using the bitcoin blockchain by means of Factom or Multichain. The latter also allows for a private blockchain. In the future other solutions will be made available</b>    The flow is generally as follows:  1. Make sure a context is available using the / POST endpoint. Normally you only need one context. This is the place where backend providers and blockchain implementations are being specified.  2. Make sure a chain has been created using the /chain POST endpoint. Normally you only need one or a handful of chains. This is a relative expensive operation.  3. Store entries on the chain from step 2. The entries will contain the content and metadata you want to store forever on the specified chain.  4. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainEasy/ApiClient', 'SphereonSDKBlockchainEasy/model/Access', 'SphereonSDKBlockchainEasy/model/AnchoredEntryResponse', 'SphereonSDKBlockchainEasy/model/Backend', 'SphereonSDKBlockchainEasy/model/Chain', 'SphereonSDKBlockchainEasy/model/CommittedChain', 'SphereonSDKBlockchainEasy/model/CommittedChainResponse', 'SphereonSDKBlockchainEasy/model/CommittedEntry', 'SphereonSDKBlockchainEasy/model/CommittedEntryResponse', 'SphereonSDKBlockchainEasy/model/Context', 'SphereonSDKBlockchainEasy/model/Entry', 'SphereonSDKBlockchainEasy/model/EntryData', 'SphereonSDKBlockchainEasy/model/Error', 'SphereonSDKBlockchainEasy/model/ErrorResponse', 'SphereonSDKBlockchainEasy/model/ExternalId', 'SphereonSDKBlockchainEasy/model/IdResponse', 'SphereonSDKBlockchainEasy/model/RpcProvider', 'SphereonSDKBlockchainEasy/api/AllApi', 'SphereonSDKBlockchainEasy/api/ChainApi', 'SphereonSDKBlockchainEasy/api/ContextApi', 'SphereonSDKBlockchainEasy/api/EntryApi', 'SphereonSDKBlockchainEasy/api/IdApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Access'), require('./model/AnchoredEntryResponse'), require('./model/Backend'), require('./model/Chain'), require('./model/CommittedChain'), require('./model/CommittedChainResponse'), require('./model/CommittedEntry'), require('./model/CommittedEntryResponse'), require('./model/Context'), require('./model/Entry'), require('./model/EntryData'), require('./model/Error'), require('./model/ErrorResponse'), require('./model/ExternalId'), require('./model/IdResponse'), require('./model/RpcProvider'), require('./api/AllApi'), require('./api/ChainApi'), require('./api/ContextApi'), require('./api/EntryApi'), require('./api/IdApi'));
  }
}(function(ApiClient, Access, AnchoredEntryResponse, Backend, Chain, CommittedChain, CommittedChainResponse, CommittedEntry, CommittedEntryResponse, Context, Entry, EntryData, Error, ErrorResponse, ExternalId, IdResponse, RpcProvider, AllApi, ChainApi, ContextApi, EntryApi, IdApi) {
  'use strict';

  /**
   * bThe_Easy_Blockchain_API_is_an_easy_to_use_API_to_store_entries_within_chains__Currently_it_stores_entries_using_the_bitcoin_blockchain_by_means_of_Factom_or_Multichain__The_latter_also_allows_for_a_private_blockchain__In_the_future_other_solutions_will_be_made_availablebThe_flow_is_generally_as_follows1__Make_sure_a_context_is_available_using_the__POST_endpoint__Normally_you_only_need_one_context__This_is_the_place_where_backend_providers_and_blockchain_implementations_are_being_specified_2__Make_sure_a_chain_has_been_created_using_the_chain_POST_endpoint__Normally_you_only_need_one_or_a_handful_of_chains__This_is_a_relative_expensive_operation_3__Store_entries_on_the_chain_from_step_2__The_entries_will_contain_the_content_and_metadata_you_want_to_store_forever_on_the_specified_chain_4__Retrieve_an_existing_entry_from_the_chain_to_verify_or_retrieve_databInteractive_testing_bA_web_based_test_console_is_available_in_the_a_hrefhttpsstore_sphereon_comSphereon_API_Storea.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var EasyBlockchainApi = require('SphereonSDKBlockchainEasy/index'); // See note below*.
   * var xxxSvc = new EasyBlockchainApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new EasyBlockchainApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['SphereonSDKBlockchainEasy/index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new EasyBlockchainApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new EasyBlockchainApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module SphereonSDKBlockchainEasy/index
   * @version 0.9.1
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:SphereonSDKBlockchainEasy/ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Access model constructor.
     * @property {module:SphereonSDKBlockchainEasy/model/Access}
     */
    Access: Access,
    /**
     * The AnchoredEntryResponse model constructor.
     * @property {module:SphereonSDKBlockchainEasy/model/AnchoredEntryResponse}
     */
    AnchoredEntryResponse: AnchoredEntryResponse,
    /**
     * The Backend model constructor.
     * @property {module:SphereonSDKBlockchainEasy/model/Backend}
     */
    Backend: Backend,
    /**
     * The Chain model constructor.
     * @property {module:SphereonSDKBlockchainEasy/model/Chain}
     */
    Chain: Chain,
    /**
     * The CommittedChain model constructor.
     * @property {module:SphereonSDKBlockchainEasy/model/CommittedChain}
     */
    CommittedChain: CommittedChain,
    /**
     * The CommittedChainResponse model constructor.
     * @property {module:SphereonSDKBlockchainEasy/model/CommittedChainResponse}
     */
    CommittedChainResponse: CommittedChainResponse,
    /**
     * The CommittedEntry model constructor.
     * @property {module:SphereonSDKBlockchainEasy/model/CommittedEntry}
     */
    CommittedEntry: CommittedEntry,
    /**
     * The CommittedEntryResponse model constructor.
     * @property {module:SphereonSDKBlockchainEasy/model/CommittedEntryResponse}
     */
    CommittedEntryResponse: CommittedEntryResponse,
    /**
     * The Context model constructor.
     * @property {module:SphereonSDKBlockchainEasy/model/Context}
     */
    Context: Context,
    /**
     * The Entry model constructor.
     * @property {module:SphereonSDKBlockchainEasy/model/Entry}
     */
    Entry: Entry,
    /**
     * The EntryData model constructor.
     * @property {module:SphereonSDKBlockchainEasy/model/EntryData}
     */
    EntryData: EntryData,
    /**
     * The Error model constructor.
     * @property {module:SphereonSDKBlockchainEasy/model/Error}
     */
    Error: Error,
    /**
     * The ErrorResponse model constructor.
     * @property {module:SphereonSDKBlockchainEasy/model/ErrorResponse}
     */
    ErrorResponse: ErrorResponse,
    /**
     * The ExternalId model constructor.
     * @property {module:SphereonSDKBlockchainEasy/model/ExternalId}
     */
    ExternalId: ExternalId,
    /**
     * The IdResponse model constructor.
     * @property {module:SphereonSDKBlockchainEasy/model/IdResponse}
     */
    IdResponse: IdResponse,
    /**
     * The RpcProvider model constructor.
     * @property {module:SphereonSDKBlockchainEasy/model/RpcProvider}
     */
    RpcProvider: RpcProvider,
    /**
     * The AllApi service constructor.
     * @property {module:SphereonSDKBlockchainEasy/api/AllApi}
     */
    AllApi: AllApi,
    /**
     * The ChainApi service constructor.
     * @property {module:SphereonSDKBlockchainEasy/api/ChainApi}
     */
    ChainApi: ChainApi,
    /**
     * The ContextApi service constructor.
     * @property {module:SphereonSDKBlockchainEasy/api/ContextApi}
     */
    ContextApi: ContextApi,
    /**
     * The EntryApi service constructor.
     * @property {module:SphereonSDKBlockchainEasy/api/EntryApi}
     */
    EntryApi: EntryApi,
    /**
     * The IdApi service constructor.
     * @property {module:SphereonSDKBlockchainEasy/api/IdApi}
     */
    IdApi: IdApi
  };

  return exports;
}));
