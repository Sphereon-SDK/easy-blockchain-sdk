/**
 * Easy Blockchain API
 * <b>The Easy Blockchain API is an easy to use API to store entries within chains. Currently it stores entries using the bitcoin blockchain by means of Factom or Multichain. The latter also allows for a private blockchain. In the future other solutions will be made available</b>    The flow is generally as follows:  1. Make sure a context is available using the / POST endpoint. Normally you only need one context. This is the place where backend providers and blockchain implementations are being specified.  2. Make sure a chain has been created using the /chain POST endpoint. Normally you only need one or a handful of chains. This is a relative expensive operation.  3. Store entries on the chain from step 2. The entries will contain the content and metadata you want to store forever on the specified chain.  4. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainEasy/ApiClient', 'SphereonSDKBlockchainEasy/model/Backend', 'SphereonSDKBlockchainEasy/model/ErrorResponse', 'SphereonSDKBlockchainEasy/model/Context'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Backend'), require('../model/ErrorResponse'), require('../model/Context'));
  } else {
    // Browser globals (root is window)
    if (!root.EasyBlockchainApi) {
      root.EasyBlockchainApi = {};
    }
    root.EasyBlockchainApi.ContextApi = factory(root.EasyBlockchainApi.ApiClient, root.EasyBlockchainApi.Backend, root.EasyBlockchainApi.ErrorResponse, root.EasyBlockchainApi.Context);
  }
}(this, function(ApiClient, Backend, ErrorResponse, Context) {
  'use strict';

  /**
   * Context service.
   * @module SphereonSDKBlockchainEasy/api/ContextApi
   * @version 0.9.1
   */

  /**
   * Constructs a new ContextApi. 
   * @alias module:SphereonSDKBlockchainEasy/api/ContextApi
   * @class
   * @param {module:SphereonSDKBlockchainEasy/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:SphereonSDKBlockchainEasy/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createBackend operation.
     * @callback module:SphereonSDKBlockchainEasy/api/ContextApi~createBackendCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainEasy/model/Backend} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new backend
     * @param {module:SphereonSDKBlockchainEasy/model/Backend} backend backend
     * @param {module:SphereonSDKBlockchainEasy/api/ContextApi~createBackendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainEasy/model/Backend}
     */
    this.createBackend = function(backend, callback) {
      var postBody = backend;

      // verify the required parameter 'backend' is set
      if (backend == undefined || backend == null) {
        throw "Missing the required parameter 'backend' when calling createBackend";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = Backend;

      return this.apiClient.callApi(
        '/blockchain/easy/0.9.1/backends', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createContext operation.
     * @callback module:SphereonSDKBlockchainEasy/api/ContextApi~createContextCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainEasy/model/Context} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new context
     * @param {module:SphereonSDKBlockchainEasy/model/Context} context context
     * @param {module:SphereonSDKBlockchainEasy/api/ContextApi~createContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainEasy/model/Context}
     */
    this.createContext = function(context, callback) {
      var postBody = context;

      // verify the required parameter 'context' is set
      if (context == undefined || context == null) {
        throw "Missing the required parameter 'context' when calling createContext";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = Context;

      return this.apiClient.callApi(
        '/blockchain/easy/0.9.1/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBackend operation.
     * @callback module:SphereonSDKBlockchainEasy/api/ContextApi~deleteBackendCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete backend by id (not by ledgername)
     * @param {String} backendId backendId
     * @param {module:SphereonSDKBlockchainEasy/api/ContextApi~deleteBackendCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBackend = function(backendId, callback) {
      var postBody = null;

      // verify the required parameter 'backendId' is set
      if (backendId == undefined || backendId == null) {
        throw "Missing the required parameter 'backendId' when calling deleteBackend";
      }


      var pathParams = {
        'backendId': backendId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/blockchain/easy/0.9.1/backends/{backendId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findBackends operation.
     * @callback module:SphereonSDKBlockchainEasy/api/ContextApi~findBackendsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:SphereonSDKBlockchainEasy/model/Backend>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find existing backend(s) by id (single result) and/or ledgername (multiple results). Optionally including public backends of others
     * @param {String} backendId backendId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePublic includePublic (default to false)
     * @param {module:SphereonSDKBlockchainEasy/api/ContextApi~findBackendsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:SphereonSDKBlockchainEasy/model/Backend>}
     */
    this.findBackends = function(backendId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'backendId' is set
      if (backendId == undefined || backendId == null) {
        throw "Missing the required parameter 'backendId' when calling findBackends";
      }


      var pathParams = {
        'backendId': backendId
      };
      var queryParams = {
        'includePublic': opts['includePublic']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = [Backend];

      return this.apiClient.callApi(
        '/blockchain/easy/0.9.1/backends/{backendId}/find', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBackend operation.
     * @callback module:SphereonSDKBlockchainEasy/api/ContextApi~getBackendCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainEasy/model/Backend} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get existing backend by id (not by ledgername). Optionally including public backend of others
     * @param {String} backendId backendId
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includePublic includePublic (default to false)
     * @param {module:SphereonSDKBlockchainEasy/api/ContextApi~getBackendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainEasy/model/Backend}
     */
    this.getBackend = function(backendId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'backendId' is set
      if (backendId == undefined || backendId == null) {
        throw "Missing the required parameter 'backendId' when calling getBackend";
      }


      var pathParams = {
        'backendId': backendId
      };
      var queryParams = {
        'includePublic': opts['includePublic']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = Backend;

      return this.apiClient.callApi(
        '/blockchain/easy/0.9.1/backends/{backendId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContext operation.
     * @callback module:SphereonSDKBlockchainEasy/api/ContextApi~getContextCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainEasy/model/Context} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an existing context
     * @param {String} context context
     * @param {module:SphereonSDKBlockchainEasy/api/ContextApi~getContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainEasy/model/Context}
     */
    this.getContext = function(context, callback) {
      var postBody = null;

      // verify the required parameter 'context' is set
      if (context == undefined || context == null) {
        throw "Missing the required parameter 'context' when calling getContext";
      }


      var pathParams = {
        'context': context
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = Context;

      return this.apiClient.callApi(
        '/blockchain/easy/0.9.1/{context}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBackends operation.
     * @callback module:SphereonSDKBlockchainEasy/api/ContextApi~listBackendsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:SphereonSDKBlockchainEasy/model/Backend>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List existing backends.
     * @param {module:SphereonSDKBlockchainEasy/api/ContextApi~listBackendsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:SphereonSDKBlockchainEasy/model/Backend>}
     */
    this.listBackends = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = [Backend];

      return this.apiClient.callApi(
        '/blockchain/easy/0.9.1/backends', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
