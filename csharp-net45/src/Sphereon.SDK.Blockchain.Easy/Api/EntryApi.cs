/* 
 * Easy Blockchain API
 *
 * <b>The Easy Blockchain API is an easy to use API to store entries within chains. Currently it stores entries using the bitcoin blockchain by means of Factom or Multichain. The latter also allows for a private blockchain. In the future other solutions will be made available</b>    The flow is generally as follows:  1. Make sure a context is available using the / POST endpoint. Normally you only need one context. This is the place where backend providers and blockchain implementations are being specified.  2. Make sure a chain has been created using the /chain POST endpoint. Normally you only need one or a handful of chains. This is a relative expensive operation.  3. Store entries on the chain from step 2. The entries will contain the content and metadata you want to store forever on the specified chain.  4. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Sphereon.SDK.Blockchain.Easy.Client;
using Sphereon.SDK.Blockchain.Easy.Model;

namespace Sphereon.SDK.Blockchain.Easy.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>CommittedEntryResponse</returns>
        CommittedEntryResponse CreateEntry (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null);

        /// <summary>
        /// Create a new entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>ApiResponse of CommittedEntryResponse</returns>
        ApiResponse<CommittedEntryResponse> CreateEntryWithHttpInfo (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null);
        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>AnchoredEntryResponse</returns>
        AnchoredEntryResponse EntryById (string context, string chainId, string entryId, DateTime? currentAnchorTime = null);

        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        ApiResponse<AnchoredEntryResponse> EntryByIdWithHttpInfo (string context, string chainId, string entryId, DateTime? currentAnchorTime = null);
        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>AnchoredEntryResponse</returns>
        AnchoredEntryResponse EntryByRequest (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null);

        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        ApiResponse<AnchoredEntryResponse> EntryByRequestWithHttpInfo (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null);
        /// <summary>
        /// Get the first entry in the provided chain. This is the oldest entry also called the chain tail.  Please note that the achorTimes will only contain the first anchor time. Call getEntry to retrieve all times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <returns>AnchoredEntryResponse</returns>
        AnchoredEntryResponse FirstEntry (string context, string chainId);

        /// <summary>
        /// Get the first entry in the provided chain. This is the oldest entry also called the chain tail.  Please note that the achorTimes will only contain the first anchor time. Call getEntry to retrieve all times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        ApiResponse<AnchoredEntryResponse> FirstEntryWithHttpInfo (string context, string chainId);
        /// <summary>
        /// Get the last entry in the provided chain. This is the most recent entry also called the chain head. Please note that the achorTimes will only contain the latest anchor time. Call getEntry to retrieve all times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <returns>AnchoredEntryResponse</returns>
        AnchoredEntryResponse LastEntry (string context, string chainId);

        /// <summary>
        /// Get the last entry in the provided chain. This is the most recent entry also called the chain head. Please note that the achorTimes will only contain the latest anchor time. Call getEntry to retrieve all times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        ApiResponse<AnchoredEntryResponse> LastEntryWithHttpInfo (string context, string chainId);
        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>AnchoredEntryResponse</returns>
        AnchoredEntryResponse NextEntryById (string context, string chainId, string entryId, DateTime? currentAnchorTime = null);

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        ApiResponse<AnchoredEntryResponse> NextEntryByIdWithHttpInfo (string context, string chainId, string entryId, DateTime? currentAnchorTime = null);
        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>AnchoredEntryResponse</returns>
        AnchoredEntryResponse NextEntryByRequest (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null);

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        ApiResponse<AnchoredEntryResponse> NextEntryByRequestWithHttpInfo (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null);
        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>AnchoredEntryResponse</returns>
        AnchoredEntryResponse PreviousEntryById (string context, string chainId, string entryId, DateTime? currentAnchorTime = null);

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        ApiResponse<AnchoredEntryResponse> PreviousEntryByIdWithHttpInfo (string context, string chainId, string entryId, DateTime? currentAnchorTime = null);
        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>AnchoredEntryResponse</returns>
        AnchoredEntryResponse PreviousEntryByRequest (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null);

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        ApiResponse<AnchoredEntryResponse> PreviousEntryByRequestWithHttpInfo (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of CommittedEntryResponse</returns>
        System.Threading.Tasks.Task<CommittedEntryResponse> CreateEntryAsync (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null);

        /// <summary>
        /// Create a new entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of ApiResponse (CommittedEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommittedEntryResponse>> CreateEntryAsyncWithHttpInfo (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null);
        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        System.Threading.Tasks.Task<AnchoredEntryResponse> EntryByIdAsync (string context, string chainId, string entryId, DateTime? currentAnchorTime = null);

        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> EntryByIdAsyncWithHttpInfo (string context, string chainId, string entryId, DateTime? currentAnchorTime = null);
        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        System.Threading.Tasks.Task<AnchoredEntryResponse> EntryByRequestAsync (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null);

        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> EntryByRequestAsyncWithHttpInfo (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null);
        /// <summary>
        /// Get the first entry in the provided chain. This is the oldest entry also called the chain tail.  Please note that the achorTimes will only contain the first anchor time. Call getEntry to retrieve all times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        System.Threading.Tasks.Task<AnchoredEntryResponse> FirstEntryAsync (string context, string chainId);

        /// <summary>
        /// Get the first entry in the provided chain. This is the oldest entry also called the chain tail.  Please note that the achorTimes will only contain the first anchor time. Call getEntry to retrieve all times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> FirstEntryAsyncWithHttpInfo (string context, string chainId);
        /// <summary>
        /// Get the last entry in the provided chain. This is the most recent entry also called the chain head. Please note that the achorTimes will only contain the latest anchor time. Call getEntry to retrieve all times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        System.Threading.Tasks.Task<AnchoredEntryResponse> LastEntryAsync (string context, string chainId);

        /// <summary>
        /// Get the last entry in the provided chain. This is the most recent entry also called the chain head. Please note that the achorTimes will only contain the latest anchor time. Call getEntry to retrieve all times
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> LastEntryAsyncWithHttpInfo (string context, string chainId);
        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        System.Threading.Tasks.Task<AnchoredEntryResponse> NextEntryByIdAsync (string context, string chainId, string entryId, DateTime? currentAnchorTime = null);

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> NextEntryByIdAsyncWithHttpInfo (string context, string chainId, string entryId, DateTime? currentAnchorTime = null);
        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        System.Threading.Tasks.Task<AnchoredEntryResponse> NextEntryByRequestAsync (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null);

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> NextEntryByRequestAsyncWithHttpInfo (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null);
        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        System.Threading.Tasks.Task<AnchoredEntryResponse> PreviousEntryByIdAsync (string context, string chainId, string entryId, DateTime? currentAnchorTime = null);

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> PreviousEntryByIdAsyncWithHttpInfo (string context, string chainId, string entryId, DateTime? currentAnchorTime = null);
        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        System.Threading.Tasks.Task<AnchoredEntryResponse> PreviousEntryByRequestAsync (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null);

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> PreviousEntryByRequestAsyncWithHttpInfo (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EntryApi : IEntryApi
    {
        private Sphereon.SDK.Blockchain.Easy.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EntryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntryApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Sphereon.SDK.Blockchain.Easy.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EntryApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Sphereon.SDK.Blockchain.Easy.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sphereon.SDK.Blockchain.Easy.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>CommittedEntryResponse</returns>
        public CommittedEntryResponse CreateEntry (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null)
        {
             ApiResponse<CommittedEntryResponse> localVarResponse = CreateEntryWithHttpInfo(context, chainId, entry, currentAnchorTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>ApiResponse of CommittedEntryResponse</returns>
        public ApiResponse< CommittedEntryResponse > CreateEntryWithHttpInfo (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->CreateEntry");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->CreateEntry");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling EntryApi->CreateEntry");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (currentAnchorTime != null) localVarQueryParams.Add("currentAnchorTime", Configuration.ApiClient.ParameterToString(currentAnchorTime)); // query parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommittedEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommittedEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommittedEntryResponse)));
            
        }

        /// <summary>
        /// Create a new entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of CommittedEntryResponse</returns>
        public async System.Threading.Tasks.Task<CommittedEntryResponse> CreateEntryAsync (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null)
        {
             ApiResponse<CommittedEntryResponse> localVarResponse = await CreateEntryAsyncWithHttpInfo(context, chainId, entry, currentAnchorTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of ApiResponse (CommittedEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommittedEntryResponse>> CreateEntryAsyncWithHttpInfo (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->CreateEntry");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->CreateEntry");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling EntryApi->CreateEntry");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (currentAnchorTime != null) localVarQueryParams.Add("currentAnchorTime", Configuration.ApiClient.ParameterToString(currentAnchorTime)); // query parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommittedEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommittedEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommittedEntryResponse)));
            
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>AnchoredEntryResponse</returns>
        public AnchoredEntryResponse EntryById (string context, string chainId, string entryId, DateTime? currentAnchorTime = null)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = EntryByIdWithHttpInfo(context, chainId, entryId, currentAnchorTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        public ApiResponse< AnchoredEntryResponse > EntryByIdWithHttpInfo (string context, string chainId, string entryId, DateTime? currentAnchorTime = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->EntryById");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->EntryById");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling EntryApi->EntryById");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/{entryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryId != null) localVarPathParams.Add("entryId", Configuration.ApiClient.ParameterToString(entryId)); // path parameter
            if (currentAnchorTime != null) localVarQueryParams.Add("currentAnchorTime", Configuration.ApiClient.ParameterToString(currentAnchorTime)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        public async System.Threading.Tasks.Task<AnchoredEntryResponse> EntryByIdAsync (string context, string chainId, string entryId, DateTime? currentAnchorTime = null)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = await EntryByIdAsyncWithHttpInfo(context, chainId, entryId, currentAnchorTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> EntryByIdAsyncWithHttpInfo (string context, string chainId, string entryId, DateTime? currentAnchorTime = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->EntryById");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->EntryById");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling EntryApi->EntryById");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/{entryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryId != null) localVarPathParams.Add("entryId", Configuration.ApiClient.ParameterToString(entryId)); // path parameter
            if (currentAnchorTime != null) localVarQueryParams.Add("currentAnchorTime", Configuration.ApiClient.ParameterToString(currentAnchorTime)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>AnchoredEntryResponse</returns>
        public AnchoredEntryResponse EntryByRequest (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = EntryByRequestWithHttpInfo(context, chainId, entry, currentAnchorTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        public ApiResponse< AnchoredEntryResponse > EntryByRequestWithHttpInfo (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->EntryByRequest");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->EntryByRequest");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling EntryApi->EntryByRequest");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/entry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (currentAnchorTime != null) localVarQueryParams.Add("currentAnchorTime", Configuration.ApiClient.ParameterToString(currentAnchorTime)); // query parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntryByRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        public async System.Threading.Tasks.Task<AnchoredEntryResponse> EntryByRequestAsync (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = await EntryByRequestAsyncWithHttpInfo(context, chainId, entry, currentAnchorTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> EntryByRequestAsyncWithHttpInfo (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->EntryByRequest");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->EntryByRequest");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling EntryApi->EntryByRequest");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/entry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (currentAnchorTime != null) localVarQueryParams.Add("currentAnchorTime", Configuration.ApiClient.ParameterToString(currentAnchorTime)); // query parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntryByRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the first entry in the provided chain. This is the oldest entry also called the chain tail.  Please note that the achorTimes will only contain the first anchor time. Call getEntry to retrieve all times 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <returns>AnchoredEntryResponse</returns>
        public AnchoredEntryResponse FirstEntry (string context, string chainId)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = FirstEntryWithHttpInfo(context, chainId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the first entry in the provided chain. This is the oldest entry also called the chain tail.  Please note that the achorTimes will only contain the first anchor time. Call getEntry to retrieve all times 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        public ApiResponse< AnchoredEntryResponse > FirstEntryWithHttpInfo (string context, string chainId)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->FirstEntry");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->FirstEntry");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/first";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FirstEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the first entry in the provided chain. This is the oldest entry also called the chain tail.  Please note that the achorTimes will only contain the first anchor time. Call getEntry to retrieve all times 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        public async System.Threading.Tasks.Task<AnchoredEntryResponse> FirstEntryAsync (string context, string chainId)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = await FirstEntryAsyncWithHttpInfo(context, chainId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the first entry in the provided chain. This is the oldest entry also called the chain tail.  Please note that the achorTimes will only contain the first anchor time. Call getEntry to retrieve all times 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> FirstEntryAsyncWithHttpInfo (string context, string chainId)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->FirstEntry");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->FirstEntry");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/first";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FirstEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the last entry in the provided chain. This is the most recent entry also called the chain head. Please note that the achorTimes will only contain the latest anchor time. Call getEntry to retrieve all times 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <returns>AnchoredEntryResponse</returns>
        public AnchoredEntryResponse LastEntry (string context, string chainId)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = LastEntryWithHttpInfo(context, chainId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the last entry in the provided chain. This is the most recent entry also called the chain head. Please note that the achorTimes will only contain the latest anchor time. Call getEntry to retrieve all times 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        public ApiResponse< AnchoredEntryResponse > LastEntryWithHttpInfo (string context, string chainId)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->LastEntry");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->LastEntry");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LastEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the last entry in the provided chain. This is the most recent entry also called the chain head. Please note that the achorTimes will only contain the latest anchor time. Call getEntry to retrieve all times 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        public async System.Threading.Tasks.Task<AnchoredEntryResponse> LastEntryAsync (string context, string chainId)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = await LastEntryAsyncWithHttpInfo(context, chainId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the last entry in the provided chain. This is the most recent entry also called the chain head. Please note that the achorTimes will only contain the latest anchor time. Call getEntry to retrieve all times 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> LastEntryAsyncWithHttpInfo (string context, string chainId)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->LastEntry");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->LastEntry");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LastEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>AnchoredEntryResponse</returns>
        public AnchoredEntryResponse NextEntryById (string context, string chainId, string entryId, DateTime? currentAnchorTime = null)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = NextEntryByIdWithHttpInfo(context, chainId, entryId, currentAnchorTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        public ApiResponse< AnchoredEntryResponse > NextEntryByIdWithHttpInfo (string context, string chainId, string entryId, DateTime? currentAnchorTime = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->NextEntryById");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->NextEntryById");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling EntryApi->NextEntryById");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/{entryId}/next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryId != null) localVarPathParams.Add("entryId", Configuration.ApiClient.ParameterToString(entryId)); // path parameter
            if (currentAnchorTime != null) localVarQueryParams.Add("currentAnchorTime", Configuration.ApiClient.ParameterToString(currentAnchorTime)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NextEntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        public async System.Threading.Tasks.Task<AnchoredEntryResponse> NextEntryByIdAsync (string context, string chainId, string entryId, DateTime? currentAnchorTime = null)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = await NextEntryByIdAsyncWithHttpInfo(context, chainId, entryId, currentAnchorTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> NextEntryByIdAsyncWithHttpInfo (string context, string chainId, string entryId, DateTime? currentAnchorTime = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->NextEntryById");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->NextEntryById");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling EntryApi->NextEntryById");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/{entryId}/next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryId != null) localVarPathParams.Add("entryId", Configuration.ApiClient.ParameterToString(entryId)); // path parameter
            if (currentAnchorTime != null) localVarQueryParams.Add("currentAnchorTime", Configuration.ApiClient.ParameterToString(currentAnchorTime)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NextEntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>AnchoredEntryResponse</returns>
        public AnchoredEntryResponse NextEntryByRequest (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = NextEntryByRequestWithHttpInfo(context, chainId, entry, currentAnchorTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        public ApiResponse< AnchoredEntryResponse > NextEntryByRequestWithHttpInfo (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->NextEntryByRequest");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->NextEntryByRequest");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling EntryApi->NextEntryByRequest");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/entry/next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (currentAnchorTime != null) localVarQueryParams.Add("currentAnchorTime", Configuration.ApiClient.ParameterToString(currentAnchorTime)); // query parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NextEntryByRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        public async System.Threading.Tasks.Task<AnchoredEntryResponse> NextEntryByRequestAsync (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = await NextEntryByRequestAsyncWithHttpInfo(context, chainId, entry, currentAnchorTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> NextEntryByRequestAsyncWithHttpInfo (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->NextEntryByRequest");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->NextEntryByRequest");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling EntryApi->NextEntryByRequest");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/entry/next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (currentAnchorTime != null) localVarQueryParams.Add("currentAnchorTime", Configuration.ApiClient.ParameterToString(currentAnchorTime)); // query parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NextEntryByRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>AnchoredEntryResponse</returns>
        public AnchoredEntryResponse PreviousEntryById (string context, string chainId, string entryId, DateTime? currentAnchorTime = null)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = PreviousEntryByIdWithHttpInfo(context, chainId, entryId, currentAnchorTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        public ApiResponse< AnchoredEntryResponse > PreviousEntryByIdWithHttpInfo (string context, string chainId, string entryId, DateTime? currentAnchorTime = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->PreviousEntryById");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->PreviousEntryById");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling EntryApi->PreviousEntryById");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/{entryId}/previous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryId != null) localVarPathParams.Add("entryId", Configuration.ApiClient.ParameterToString(entryId)); // path parameter
            if (currentAnchorTime != null) localVarQueryParams.Add("currentAnchorTime", Configuration.ApiClient.ParameterToString(currentAnchorTime)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreviousEntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        public async System.Threading.Tasks.Task<AnchoredEntryResponse> PreviousEntryByIdAsync (string context, string chainId, string entryId, DateTime? currentAnchorTime = null)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = await PreviousEntryByIdAsyncWithHttpInfo(context, chainId, entryId, currentAnchorTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> PreviousEntryByIdAsyncWithHttpInfo (string context, string chainId, string entryId, DateTime? currentAnchorTime = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->PreviousEntryById");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->PreviousEntryById");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling EntryApi->PreviousEntryById");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/{entryId}/previous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryId != null) localVarPathParams.Add("entryId", Configuration.ApiClient.ParameterToString(entryId)); // path parameter
            if (currentAnchorTime != null) localVarQueryParams.Add("currentAnchorTime", Configuration.ApiClient.ParameterToString(currentAnchorTime)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreviousEntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>AnchoredEntryResponse</returns>
        public AnchoredEntryResponse PreviousEntryByRequest (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = PreviousEntryByRequestWithHttpInfo(context, chainId, entry, currentAnchorTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        public ApiResponse< AnchoredEntryResponse > PreviousEntryByRequestWithHttpInfo (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->PreviousEntryByRequest");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->PreviousEntryByRequest");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling EntryApi->PreviousEntryByRequest");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/entry/previous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (currentAnchorTime != null) localVarQueryParams.Add("currentAnchorTime", Configuration.ApiClient.ParameterToString(currentAnchorTime)); // query parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreviousEntryByRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        public async System.Threading.Tasks.Task<AnchoredEntryResponse> PreviousEntryByRequestAsync (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = await PreviousEntryByRequestAsyncWithHttpInfo(context, chainId, entry, currentAnchorTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">context</param>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <param name="currentAnchorTime"> (optional)</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> PreviousEntryByRequestAsyncWithHttpInfo (string context, string chainId, Entry entry, DateTime? currentAnchorTime = null)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling EntryApi->PreviousEntryByRequest");
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryApi->PreviousEntryByRequest");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling EntryApi->PreviousEntryByRequest");

            var localVarPath = "/blockchain/easy/0.9.1/{context}/chains/{chainId}/entries/entry/previous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (context != null) localVarPathParams.Add("context", Configuration.ApiClient.ParameterToString(context)); // path parameter
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (currentAnchorTime != null) localVarQueryParams.Add("currentAnchorTime", Configuration.ApiClient.ParameterToString(currentAnchorTime)); // query parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreviousEntryByRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

    }
}
